"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9481],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),u=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),d=u(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(y,i(i({ref:e},l),{},{components:n})):r.createElement(y,i({ref:e},l))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13165:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=n(83117),a=(n(67294),n(3905));const o={},i="Quick Start",s={unversionedId:"programs/hydra/quick-start",id:"programs/hydra/quick-start",title:"Quick Start",description:"To get started with Hydra, you'll need the package for your programming environment.",source:"@site/docs/01-programs/04-hydra/01-quick-start.md",sourceDirName:"01-programs/04-hydra",slug:"/programs/hydra/quick-start",permalink:"/programs/hydra/quick-start",draft:!1,editUrl:"https://github.com/metaplex/docs/tree/main/docs/01-programs/04-hydra/01-quick-start.md",tags:[],version:"current",lastUpdatedAt:1664341869,formattedLastUpdatedAt:"Sep 28, 2022",sidebarPosition:1,frontMatter:{},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/programs/hydra/intro"},next:{title:"NFT Packs",permalink:"/programs/nft-packs/"}},c={},u=[{value:"Quick Start - JS",id:"quick-start---js",level:2}],l={toc:u};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-start"},"Quick Start"),(0,a.kt)("p",null,"To get started with Hydra, you'll need the package for your programming environment."),(0,a.kt)("p",null,"If you are using Rust grab the crate here:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/hydra_wallet"},"https://crates.io/crates/hydra_wallet")),(0,a.kt)("p",null,"If you are using Javascript, grab the package here:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@glasseaters/hydra-sdk"},"https://www.npmjs.com/package/@glasseaters/hydra-sdk")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Everything is brand new so expect frequent changes.\nWe don't support the use of the Anchor TS library, we only support the Hydra SDK. This is because we can add accounts\nand arguments without breaking backward compatibility.")),(0,a.kt)("h2",{id:"quick-start---js"},"Quick Start - JS"),(0,a.kt)("p",null,"Install the package from npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @glasseaters/hydra-sdk\n")),(0,a.kt)("p",null,"This is how you'd set up a Hydra with the Wallet ",(0,a.kt)("a",{parentName:"p",href:"./index#adding-members"},"membership model"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Connection, Keypair, LAMPORTS_PER_SOL } from "@solana/web3.js";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from "@solana/spl-token";\nimport { airdrop } from "@metaplex-foundation/amman";\nimport {\n  Fanout,\n  FanoutClient,\n  FanoutMembershipMintVoucher,\n  FanoutMembershipVoucher,\n  FanoutMint,\n  MembershipModel\n} from "@glasseaters/hydra-sdk";\n\n\nconst connection = new Connection("devnet", "confirmed");\nconst authorityWallet = Keypair.generate();\n\nawait airdrop(connection, authorityWallet.publicKey, LAMPORTS_PER_SOL * 2);\n\nconst fanoutSdk = new FanoutClient(\n  connection,\n  new NodeWallet(new Account(authorityWallet.secretKey))\n);\n\n// Initialize the Hydra Wallet\nconst { fanout, nativeAccount } = await fanoutSdk.initializeFanout({\n  totalShares: 100,\n  name: `Your Globally Unique Wallet Name`,\n  membershipModel: MembershipModel.Wallet,\n});\n\n// fanout is your fanout config address\n// nativeAccount is your account address\n\n// Retrieve the On-chain Hydra Wallet\nconst fanoutAccount = await fanoutSdk.fetch<Fanout>(\n  fanout,\n  Fanout\n);\n\nconsole.log(fanoutAccount); // Shows you all the parameters in your Hydra\n\n// This is your Hydra Wallet Address\nlet HydraAccountKey = fanoutAccount.accountKey // this is the same thing as nativeAccount above\n\n\n// If you only know the Hydra name, this is how you can retrieve the account key\nlet name = `Your Globally Unique Wallet Name`\nlet [key, bump] = await fanoutSdk.fanoutKey(name)\nlet [holdingAccount, bump] = await fanoutSdk.nativeAccount(key)\n\n\n// Add members\n\nconst member1 = new Keypair();\nconst { membershipAccount1 } = await fanoutSdk.addMemberWallet({\n  fanout: init.fanout,\n  fanoutNativeAccount: init.nativeAccount,\n  membershipKey: member1.publicKey,\n  shares: 10\n});\n\n//Repeat for all members until sum(shares) == totalShares from initialization\n...\n\n// Send some Sol to the Hydra Wallet so you can distribute\nawait airdrop(connection, HydraAccountKey, 2);\n\n// Generate the distribution instructions\nlet distMember1 = await fanoutSdk.distributeWalletMemberInstructions(\n  {\n    distributeForMint: false,\n    member: member1.wallet.publicKey,\n    fanout: fanout,\n    payer: authorityWallet.publicKey, // This can be changed to whoever sends the tx\n  },\n);\n\n// Send the distribution instructions\nconst tx = await fanoutSdk.sendInstructions(\n  [...distMember1.instructions],\n  [authorityWallet],\n  authorityWallet.publicKey\n);\nif (!!tx.RpcResponseAndContext.value.err) {\n  const txdetails = await connection.getConfirmedTransaction(tx.TransactionSignature);\n  console.log(txdetails, tx.RpcResponseAndContext.value.err);\n}\n\n// Member1 Should have 0.2 more sol in their wallet\n\n')))}p.isMDXComponent=!0}}]);