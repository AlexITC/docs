"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3978],{38545:function(e,t,i){i.d(t,{Q:function(){return s},U:function(){return r}});var n=i(67294),a=i(45697),o=i.n(a);function r(e){let{children:t}=e;return n.createElement("div",{className:"accordion"},t)}function s(e){let{open:t,title:i,actions:a,keepAlive:o=!0,children:r}=e;const[s,c]=(0,n.useState)(t),l=s||o;return n.createElement("div",{className:["accordion-item",s?"accordion-item-opened":"accordion-item-closed"].join(" ")},n.createElement("div",{className:"accordion-item-header",onClick:()=>c(!s)},n.createElement("h3",null,n.createElement(d,{opened:s}),n.createElement("span",null,i)),a),n.createElement("div",{className:"accordion-item-content"},l&&r))}function d(e){let{opened:t}=e;return t?n.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"192",height:"192",fill:"currentColor",viewBox:"0 0 256 256"},n.createElement("rect",{width:"256",height:"256",fill:"none"}),n.createElement("path",{d:"M215.4,92.9A8,8,0,0,0,208,88H48a8,8,0,0,0-7.4,4.9,8.4,8.4,0,0,0,1.7,8.8l80,80a8.2,8.2,0,0,0,11.4,0l80-80A8.4,8.4,0,0,0,215.4,92.9Z"})):n.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"192",height:"192",fill:"currentColor",viewBox:"0 0 256 256"},n.createElement("rect",{width:"256",height:"256",fill:"none"}),n.createElement("path",{d:"M181.7,122.3l-80-80a8.4,8.4,0,0,0-8.8-1.7A8,8,0,0,0,88,48V208a8,8,0,0,0,4.9,7.4,8.5,8.5,0,0,0,3.1.6,8.3,8.3,0,0,0,5.7-2.3l80-80A8.1,8.1,0,0,0,181.7,122.3Z"}))}r.propTypes={children:o().array},s.propTypes={open:o().bool,title:o().string,children:o().any,actions:o().any,keepAlive:o().bool},d.propTypes={opened:o().bool}},15019:function(e,t,i){i.d(t,{A:function(){return c}});var n=i(67294),a=i(45697),o=i.n(a),r=i(96486),s=i(39960),d=i(38545);function c(e){let{fields:t,title:i="Fields",firstColumn:a="Field"}=e;return n.createElement(d.Q,{title:i},n.createElement("div",{className:"accordion-table-overflow"},n.createElement("table",{className:"accordion-table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{style:{minWidth:"10rem"}},a),n.createElement("th",null,"Offset"),n.createElement("th",null,"Size"),n.createElement("th",{style:{minWidth:"25rem"}},"Description"))),n.createElement("tbody",null,n.createElement(l,{fields:t})))))}function l(e){let{fields:t,offset:i=0,indent:a=0}=e;return t.map((e=>{const t=i;return"number"==typeof i&&"number"==typeof e.size?i+=e.size:i="~",n.createElement(u,{key:e.name,field:e,offset:t,indent:a})}))}function u(e){var t,i,a;let{field:o,offset:d=0,indent:c=0}=e,u=[];return o.optional&&u.push(n.createElement(s.Z,{href:"/programs/#optional-fields",key:"optional"},"Optional")),o.indicative&&u.push(n.createElement(s.Z,{href:"/programs/#indicative-fields",key:"indicative"},"Indicative")),u=(0,r.flatMap)(u,(e=>[e,", "])).slice(0,-1),n.createElement(n.Fragment,null,n.createElement("tr",{className:c>0?"accordion-table-nested-row":"",key:o.name},n.createElement("th",null,n.createElement("div",{style:{marginLeft:2*c+"rem"}},(0,r.startCase)(o.name))),n.createElement("td",null,null!=(t=o.offset)?t:d),n.createElement("td",null,null!=(i=o.size)?i:"~"),n.createElement("td",null,u.length>0&&n.createElement("span",{style:{fontStyle:"italic"}},"(",u,") "),n.createElement("span",{dangerouslySetInnerHTML:{__html:null!=(a=o.description)?a:""}}))),o.fields&&n.createElement(l,{fields:o.fields,offset:d,indent:c+1}))}c.propTypes={fields:o().array,title:o().string,firstColumn:o().string},l.propTypes={fields:o().array,offset:o().any,indent:o().number},u.propTypes={field:o().object,offset:o().any,indent:o().number}},35213:function(e,t,i){i.d(t,{M1:function(){return a},un:function(){return n}});const n=(e,t)=>{var i,n;const a=e.accounts.find((e=>{let{name:i}=e;return i===t})),r=null!=(i=e.docs.accounts[t])?i:{};if(!a)throw new Error("Account ["+t+"] not found in IDL");return{seeds:null!=(n=r.seeds)?n:[],fields:o(e,a)}},a=(e,t)=>{var i;const n=e.instructions.find((e=>{let{name:i}=e;return i===t})),a=null!=(i=e.docs.instructions[t])?i:{};if(!n)throw new Error("Instruction ["+t+"] not found in IDL");const r=o(e,{kind:"struct",fields:n.args});return{...n,resolvedArgs:r,...a}},o=(e,t)=>{var i,n;const a=r(e,t);if("struct"!==(null==a?void 0:a.kind)&&"struct"!==(null==a||null==(i=a.type)?void 0:i.kind))throw new Error("Can only resolve fields of struct types");const o=e=>"struct"===e.kind?e.fields.map((e=>{const t=s(e),{type:i,docs:n,...a}=o(e),r={...n};delete r.fields,delete r.type;return{optional:t,...Array.isArray(i)?{fields:i}:{type:i},...r,...a}})):e.name&&e.type?{...e,type:o(e.type)}:e.option?o(e.option):e.vec?o(e.vec):e,d=o(a);return Array.isArray(d)?d:null!=(n=d.type)?n:[]},r=(e,t)=>{const i=function(t,n){if(void 0===n&&(n={}),t.name&&t.type){var a,o,r,s;const n=null!=(a=null!=(o=null==(r=e.docs.accounts)?void 0:r[t.name])?o:null==(s=e.docs.types)?void 0:s[t.name])?a:void 0,d=i(t.type,{docs:n}),c={...d.docs,...n};return{...t,docs:c,type:d}}var d;if("struct"===t.kind)return{...t,docs:null==(d=n)?void 0:d.docs,fields:t.fields.flatMap((e=>{var t,a,o,r,s;const d=i(e,n),c=null!=(t=null==(a=n)||null==(o=a.docs)||null==(r=o.fields)?void 0:r[e.name])?t:d.docs;return null!=c&&c.flatten&&"struct"===(null==(s=d.type)?void 0:s.kind)?d.type.fields:[{...d,docs:c}]}))};if(t.defined){var c,l;const n=null!=(c=null==(l=e.docs.types)?void 0:l[t.defined])?c:{},a=e.types.find((e=>{let{name:i}=e;return i===t.defined}));return{...i(a.type,{docs:n}),typeName:t.defined,docs:n}}if(t.option){const e=i(t.option,n);return{...t,docs:e.docs,option:e}}return t.vec?{...t,vec:i(t.vec,n)}:t};return i(t)},s=e=>{const t=e=>e.name&&e.type?t(e.type):!!e.option||!!e.vec&&t(e.vec);return t(e)}},90263:function(e,t,i){i.d(t,{Z:function(){return r}});const n=[{name:"metadata",type:"literal",value:"metadata",description:"The program's prefix for PDA seeds."},{name:"token_metadata_program",type:"program"},{name:"mint",type:"variable",description:"The public key of the Mint Account to derive from."}],a=[...n,{name:"edition",type:"literal",value:"edition",description:"A literal to differentiate the Edition accounts."}],o={updateAuthority:{size:32,description:"The public key that is allowed to update this account."},primarySaleHappened:{size:1,indicative:!0,description:"A boolean indicating if the token has already been sold at least once. Once flipped to <code>True</code>, it cannot ever be <code>False</code> again. This field can affect the way royalties are distributed."},isMutable:{size:1,description:"A boolean indicating if the Metadata Account can be updated. Once flipped to <code>False</code>, it cannot ever be <code>True</code> again."},maxSupply:{size:9,description:"The maximum number of times NFTs can be printed from this Master Edition. When set to <code>None</code>, the program will enable unlimited prints. You can disable NFT printing by setting the <code>Max Supply</code> to <code>0</code>."},edition:{size:8,description:"The edition number of this printed edition. For instance, the 10th printed NFT will have <code>Edition = 10</code>."}};var r={docs:{types:{Data:{description:"A data object containing the following attributes.",fields:{name:{size:36,description:'The on-chain name of the token, limited to 32 bytes. For instance "Degen Ape #1 ".'},symbol:{size:14,description:'The on-chain symbol of the token, limited to 10 bytes. For instance "DAPE".'},uri:{size:204,description:"The URI of the token, limited to 200 bytes. <strong>This URI points to an off-chain JSON file that contains additional data following a certain standard.</strong> You can learn more about this JSON standard here. The JSON file can either be stored in a traditional server (e.g. using AWS) or using a permanent storage solution such as using Arweave."},sellerFeeBasisPoints:{size:2,indicative:!0,description:"The royalties shared by the creators in basis points \u2014 i.e. <code>550</code> means <code>5.5%</code>. Whilst this field is used by virtually all NFT marketplaces, it is not enforced by the Token Metadata program itself."},creators:{description:"An array of creators and their share of the royalties. This array is limited to 5 creators. Note that, because the <code>Creators</code> field is an array of variable length, we cannot guarantee the byte position of any field that follows (Notice the tilde <code>~</code> in the fields below). Each creator contains the following fields."}}},get DataV2(){return this.Data},Creator:{fields:{address:{offset:"~",size:32,description:"The public key of the creator"},verified:{offset:"~",size:1,description:"A boolean indicating if the creator signed the NFT. It is important to check this field to ensure the authenticity of the creator."},share:{offset:"~",size:1,indicative:!0,description:"The creator's shares of the royalties in percentage (1 byte) \u2014 i.e. <code>55</code> means <code>55%</code>. Similarly to the <code>Seller Fee Basis Points</code> field, this is used by marketplaces but not enforced by the Token Metadata program."}}},Collection:{size:34,description:"This field optionally links to the Mint address of another NFT that acts as a Collection NFT. It contains the following sub-fields.",fields:{key:{size:32,description:"The public key of the Collection NFT's Mint Account"},verified:{size:1,description:"A boolean indicating if the owner of the Collection NFT signed this NFT. It is important to check this field to ensure the authenticity of the collection."}}},Uses:{size:18,description:'This field can make NFTs usable. Meaning you can load it with a certain amount of "uses" and use it until it has run out. You can <a href="/programs/token-metadata/using-nfts">learn more about using NFTs here</a>.',fields:{useMethod:{size:1,description:"An enum defining the use behaviour for the NFT. It can be one of the following: <code>Burn</code>, <code>Multiple</code> or <code>Single</code>. "},remaining:{size:8,description:"The remaining amount of uses."},total:{size:8,description:"The total amount of uses allowed in the first place."}}},CollectionDetails:{size:8,description:'This optional enum allows us to differentiate Collection NFTs from Regular NFTs whilst adding additional context such as the amount of NFTs that are linked to the Collection NFT. You can <a href="/programs/token-metadata/certified-collections#differentiating-regular-nfts-from-collection-nfts">learn more about the sized collections here</a>',fields:{size:{size:8,description:"The number of NFTs attached to this Collection NFT."}}},CreateMetadataAccountArgsV3:{description:"An object containing all the arguments for the <code>CreateMetadataAccountV3</code> instruction.",fields:{isMutable:o.isMutable}},UpdateMetadataAccountArgsV2:{description:"An object containing all the arguments for the <code>UpdateMetadataAccountV2</code> instruction.",fields:{updateAuthority:o.updateAuthority,primarySaleHappened:o.primarySaleHappened,isMutable:o.isMutable}},CreateMasterEditionArgs:{description:"An object containing all the arguments for the <code>CreateMasterEditionV3</code> instruction.",fields:{maxSupply:o.maxSupply}},MintNewEditionFromMasterEditionViaTokenArgs:{description:"An object containing all the arguments necessary to print a new edition.",fields:{edition:o.edition}},UtilizeArgs:{description:"An object containing all the arguments necessary to utilize the NFT",fields:{numberOfUses:{size:8,description:"The number of uses to reduce."}}},ApproveUseAuthorityArgs:{description:"An object containing all the arguments necessary to approve a new Use Authority.",fields:{numberOfUses:{size:8,description:"The total number of uses allowed for the new authority."}}}},accounts:{Metadata:{seeds:n,fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to <code>MetadataV1(4)</code>."},updateAuthority:o.updateAuthority,mint:{size:32,description:"The public key of the Mint Account it derives from."},data:{flatten:!0},primarySaleHappened:o.primarySaleHappened,isMutable:o.isMutable,editionNonce:{size:2,description:"A nonce used to verify the edition number of printed NFTs. It will only be set on Edition NFTs and not Master Edition NFTs."},tokenStandard:{size:2,description:'This enum captures the fungibility of the token. You can <a href="/programs/token-metadata/token-standard">learn more about the token standard here</a>.'}}},MasterEditionV2:{seeds:a,fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>MasterEditionV2(6)</code> (or, for previous versions: <code>MasterEditionV1(2)</code>)."},supply:{size:8,description:"The amount of NFTs printed from this Master Edition. This field is automatically computed by the program and cannot be manually updated. Once the <code>Supply</code> reaches the <code>Max Supply</code>, no more prints can be made from this Master Edition."},maxSupply:o.maxSupply}},Edition:{seeds:a,fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>EditionV1(1)</code>."},parent:{size:32,description:"The public key of the Master Edition account that printed this edition."},edition:o.edition}},EditionMarker:{seeds:[...a,{name:"edition_marker",type:"variable",description:"The edition number divided by <code>248</code> rounded down."}],fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>EditionMarker(7)</code>."},ledger:{size:31,description:"An array of 31 bytes keeping track of the editions that have been printed within the marker's range. With 31 bytes, each marker keep track of 248 editions using a bitmask."}}},CollectionAuthorityRecord:{seeds:[...n,{name:"collection_authority_prefix",type:"literal",value:"collection_authority",description:"A literal to differentiate the Collection Authority Record accounts."},{name:"collection_authority",type:"variable",description:"The public key of the authority that is now allowed to verify collections on that NFT."}],fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>CollectionAuthorityRecord(9)</code>."},bump:{size:1,description:"The bump that was used to create the PDA of this account."}}},UseAuthorityRecord:{seeds:[...n,{name:"user_prefix",type:"literal",value:"user",description:"A literal to differentiate the Use Authority Record accounts."},{name:"user",type:"variable",description:"The public key of the authority that is now allowed to use that NFT."}],fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>UseAuthorityRecord(8)</code>."},allowedUses:{size:8,description:"The amount of <code>uses</code> this authority is allowed to use."},bump:{size:1,description:"The bump that was used to create the PDA of this account."}}}},instructions:{}},version:"1.4.0",name:"mpl_token_metadata",instructions:[{name:"CreateMetadataAccount",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of token asset"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"update authority info"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"}],args:[{name:"createMetadataAccountArgs",type:{defined:"CreateMetadataAccountArgs"}}],discriminant:{type:"u8",value:0}},{name:"UpdateMetadataAccount",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority key"}],args:[{name:"updateMetadataAccountArgs",type:{defined:"UpdateMetadataAccountArgs"}}],discriminant:{type:"u8",value:1}},{name:"DeprecatedCreateMasterEdition",accounts:[{name:"edition",isMut:!0,isSigner:!1,desc:"Unallocated edition V1 account with address as pda of ['metadata', program id, mint, 'edition']"},{name:"mint",isMut:!0,isSigner:!1,desc:"Metadata mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint - A mint you control that can mint tokens that can be exchanged for limited editions of your master edition via the MintNewEditionFromMasterEditionViaToken endpoint"},{name:"oneTimePrintingAuthorizationMint",isMut:!0,isSigner:!1,desc:"One time authorization printing mint - A mint you control that prints tokens that gives the bearer permission to mint any number of tokens from the printing mint one time via an endpoint with the token-metadata program for your metadata. Also burns the token."},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Current Update authority key"},{name:"printingMintAuthority",isMut:!1,isSigner:!0,desc:"Printing mint authority - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"payer",isMut:!1,isSigner:!0,desc:"payer"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"},{name:"oneTimePrintingAuthorizationMintAuthority",isMut:!1,isSigner:!0,desc:"One time authorization printing mint authority - must be provided if using max supply. THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."}],args:[{name:"createMasterEditionArgs",type:{defined:"CreateMasterEditionArgs"}}],discriminant:{type:"u8",value:2}},{name:"DeprecatedMintNewEditionFromMasterEditionViaPrintingToken",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"New Metadata key (pda of ['metadata', program id, mint id])"},{name:"edition",isMut:!0,isSigner:!1,desc:"New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])"},{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"},{name:"mint",isMut:!0,isSigner:!1,desc:"Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority of new mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing Mint of master record edition"},{name:"masterTokenAccount",isMut:!0,isSigner:!1,desc:"Token account containing Printing mint token to be transferred"},{name:"editionMarker",isMut:!0,isSigner:!1,desc:"Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])"},{name:"burnAuthority",isMut:!1,isSigner:!0,desc:"Burn authority for this token"},{name:"payer",isMut:!1,isSigner:!0,desc:"payer"},{name:"masterUpdateAuthority",isMut:!1,isSigner:!1,desc:"update authority info for new metadata account"},{name:"masterMetadata",isMut:!1,isSigner:!1,desc:"Master record metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"},{name:"reservationList",isMut:!0,isSigner:!1,desc:"Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list.",optional:!0}],args:[],discriminant:{type:"u8",value:3}},{name:"UpdatePrimarySaleHappenedViaToken",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"owner",isMut:!1,isSigner:!0,desc:"Owner on the token account"},{name:"token",isMut:!1,isSigner:!1,desc:"Account containing tokens from the metadata's mint"}],args:[],discriminant:{type:"u8",value:4}},{name:"DeprecatedSetReservationList",accounts:[{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"reservationList",isMut:!0,isSigner:!1,desc:"PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"},{name:"resource",isMut:!1,isSigner:!0,desc:"The resource you tied the reservation list too"}],args:[{name:"setReservationListArgs",type:{defined:"SetReservationListArgs"}}],discriminant:{type:"u8",value:5}},{name:"DeprecatedCreateReservationList",accounts:[{name:"reservationList",isMut:!0,isSigner:!1,desc:"PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"},{name:"payer",isMut:!1,isSigner:!0,desc:"Payer"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"masterEdition",isMut:!1,isSigner:!1,desc:" Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"resource",isMut:!1,isSigner:!1,desc:"A resource you wish to tie the reservation list to. This is so your later visitors who come to redeem can derive your reservation list PDA with something they can easily get at. You choose what this should be."},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"}],args:[],discriminant:{type:"u8",value:6}},{name:"SignMetadata",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"creator",isMut:!1,isSigner:!0,desc:"Creator"}],args:[],discriminant:{type:"u8",value:7}},{name:"DeprecatedMintPrintingTokensViaToken",accounts:[{name:"destination",isMut:!0,isSigner:!1,desc:"Destination account"},{name:"token",isMut:!0,isSigner:!1,desc:"Token account containing one time authorization token"},{name:"oneTimePrintingAuthorizationMint",isMut:!0,isSigner:!1,desc:"One time authorization mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint"},{name:"burnAuthority",isMut:!1,isSigner:!0,desc:"Burn authority"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"masterEdition",isMut:!1,isSigner:!1,desc:"Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent"}],args:[{name:"mintPrintingTokensViaTokenArgs",type:{defined:"MintPrintingTokensViaTokenArgs"}}],discriminant:{type:"u8",value:8}},{name:"DeprecatedMintPrintingTokens",accounts:[{name:"destination",isMut:!0,isSigner:!1,desc:"Destination account"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"masterEdition",isMut:!1,isSigner:!1,desc:"Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent"}],args:[{name:"mintPrintingTokensViaTokenArgs",type:{defined:"MintPrintingTokensViaTokenArgs"}}],discriminant:{type:"u8",value:9}},{name:"CreateMasterEdition",accounts:[{name:"edition",isMut:!0,isSigner:!1,desc:"Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']"},{name:"mint",isMut:!0,isSigner:!1,desc:"Metadata mint"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"}],args:[{name:"createMasterEditionArgs",type:{defined:"CreateMasterEditionArgs"}}],discriminant:{type:"u8",value:10}},{name:"MintNewEditionFromMasterEditionViaToken",accounts:[{name:"newMetadata",isMut:!0,isSigner:!1,desc:"New Metadata key (pda of ['metadata', program id, mint id])"},{name:"newEdition",isMut:!0,isSigner:!1,desc:"New Edition (pda of ['metadata', program id, mint id, 'edition'])"},{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])"},{name:"newMint",isMut:!0,isSigner:!1,desc:"Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"editionMarkPda",isMut:!0,isSigner:!1,desc:"Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."},{name:"newMintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority of new mint"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"tokenAccountOwner",isMut:!1,isSigner:!0,desc:"owner of token account containing master token (#8)"},{name:"tokenAccount",isMut:!1,isSigner:!1,desc:"token account containing token from master metadata mint"},{name:"newMetadataUpdateAuthority",isMut:!1,isSigner:!1,desc:"Update authority info for new metadata"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Master record metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"mintNewEditionFromMasterEditionViaTokenArgs",type:{defined:"MintNewEditionFromMasterEditionViaTokenArgs"}}],discriminant:{type:"u8",value:11}},{name:"ConvertMasterEditionV1ToV2",accounts:[{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"},{name:"oneTimeAuth",isMut:!0,isSigner:!1,desc:"One time authorization mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint"}],args:[],discriminant:{type:"u8",value:12}},{name:"MintNewEditionFromMasterEditionViaVaultProxy",accounts:[{name:"newMetadata",isMut:!0,isSigner:!1,desc:"New Metadata key (pda of ['metadata', program id, mint id])"},{name:"newEdition",isMut:!0,isSigner:!1,desc:"New Edition (pda of ['metadata', program id, mint id, 'edition'])"},{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']"},{name:"newMint",isMut:!0,isSigner:!1,desc:"Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"editionMarkPda",isMut:!0,isSigner:!1,desc:"Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."},{name:"newMintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority of new mint"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"vaultAuthority",isMut:!1,isSigner:!0,desc:"Vault authority"},{name:"safetyDepositStore",isMut:!1,isSigner:!1,desc:"Safety deposit token store account"},{name:"safetyDepositBox",isMut:!1,isSigner:!1,desc:"Safety deposit box"},{name:"vault",isMut:!1,isSigner:!1,desc:"Vault"},{name:"newMetadataUpdateAuthority",isMut:!1,isSigner:!1,desc:"Update authority info for new metadata"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Master record metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"tokenVaultProgram",isMut:!1,isSigner:!1,desc:"Token vault program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"mintNewEditionFromMasterEditionViaTokenArgs",type:{defined:"MintNewEditionFromMasterEditionViaTokenArgs"}}],discriminant:{type:"u8",value:13}},{name:"PuffMetadata",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"}],args:[],discriminant:{type:"u8",value:14}},{name:"UpdateMetadataAccountV2",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority key"}],args:[{name:"updateMetadataAccountArgsV2",type:{defined:"UpdateMetadataAccountArgsV2"}}],discriminant:{type:"u8",value:15}},{name:"CreateMetadataAccountV2",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of token asset"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"update authority info"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"createMetadataAccountArgsV2",type:{defined:"CreateMetadataAccountArgsV2"}}],discriminant:{type:"u8",value:16}},{name:"CreateMasterEditionV3",accounts:[{name:"edition",isMut:!0,isSigner:!1,desc:"Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']"},{name:"mint",isMut:!0,isSigner:!1,desc:"Metadata mint"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"createMasterEditionArgs",type:{defined:"CreateMasterEditionArgs"}}],discriminant:{type:"u8",value:17}},{name:"VerifyCollection",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!1,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"}],args:[],discriminant:{type:"u8",value:18}},{name:"Utilize",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token Account Of NFT"},{name:"mint",isMut:!0,isSigner:!1,desc:"Mint of the Metadata"},{name:"useAuthority",isMut:!0,isSigner:!0,desc:"A Use Authority / Can be the current Owner of the NFT"},{name:"owner",isMut:!1,isSigner:!1,desc:"Owner"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"ataProgram",isMut:!1,isSigner:!1,desc:"Associated Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"},{name:"useAuthorityRecord",isMut:!0,isSigner:!1,desc:"Use Authority Record PDA If present the program Assumes a delegated use authority",optional:!0},{name:"burner",isMut:!1,isSigner:!1,desc:"Program As Signer (Burner)",optional:!0}],args:[{name:"utilizeArgs",type:{defined:"UtilizeArgs"}}],discriminant:{type:"u8",value:19}},{name:"ApproveUseAuthority",accounts:[{name:"useAuthorityRecord",isMut:!0,isSigner:!1,desc:"Use Authority Record PDA"},{name:"owner",isMut:!0,isSigner:!0,desc:"Owner"},{name:"payer",isMut:!0,isSigner:!0,desc:"Payer"},{name:"user",isMut:!1,isSigner:!1,desc:"A Use Authority"},{name:"ownerTokenAccount",isMut:!0,isSigner:!1,desc:"Owned Token Account Of Mint"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Metadata"},{name:"burner",isMut:!1,isSigner:!1,desc:"Program As Signer (Burner)"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"approveUseAuthorityArgs",type:{defined:"ApproveUseAuthorityArgs"}}],discriminant:{type:"u8",value:20}},{name:"RevokeUseAuthority",accounts:[{name:"useAuthorityRecord",isMut:!0,isSigner:!1,desc:"Use Authority Record PDA"},{name:"owner",isMut:!0,isSigner:!0,desc:"Owner"},{name:"user",isMut:!1,isSigner:!1,desc:"A Use Authority"},{name:"ownerTokenAccount",isMut:!0,isSigner:!1,desc:"Owned Token Account Of Mint"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Metadata"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[],discriminant:{type:"u8",value:21}},{name:"UnverifyCollection",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Authority"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!1,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:22}},{name:"ApproveCollectionAuthority",accounts:[{name:"collectionAuthorityRecord",isMut:!0,isSigner:!1,desc:"Collection Authority Record PDA"},{name:"newCollectionAuthority",isMut:!1,isSigner:!1,desc:"A Collection Authority"},{name:"updateAuthority",isMut:!0,isSigner:!0,desc:"Update Authority of Collection NFT"},{name:"payer",isMut:!0,isSigner:!0,desc:"Payer"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Collection Metadata account"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Collection Metadata"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[],discriminant:{type:"u8",value:23}},{name:"RevokeCollectionAuthority",accounts:[{name:"collectionAuthorityRecord",isMut:!0,isSigner:!1,desc:"Collection Authority Record PDA"},{name:"delegateAuthority",isMut:!0,isSigner:!1,desc:"Delegated Collection Authority"},{name:"revokeAuthority",isMut:!0,isSigner:!0,desc:"Update Authority, or Delegated Authority, of Collection NFT"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Metadata"}],args:[],discriminant:{type:"u8",value:24}},{name:"SetAndVerifyCollection",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"Payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"Update Authority of Collection NFT and NFT"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!1,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:25}},{name:"FreezeDelegatedAccount",accounts:[{name:"delegate",isMut:!0,isSigner:!0,desc:"Delegate"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token account to freeze"},{name:"edition",isMut:!1,isSigner:!1,desc:"Edition"},{name:"mint",isMut:!1,isSigner:!1,desc:"Token mint"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token Program"}],args:[],discriminant:{type:"u8",value:26}},{name:"ThawDelegatedAccount",accounts:[{name:"delegate",isMut:!0,isSigner:!0,desc:"Delegate"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token account to thaw"},{name:"edition",isMut:!1,isSigner:!1,desc:"Edition"},{name:"mint",isMut:!1,isSigner:!1,desc:"Token mint"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token Program"}],args:[],discriminant:{type:"u8",value:27}},{name:"RemoveCreatorVerification",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"creator",isMut:!1,isSigner:!0,desc:"Creator"}],args:[],discriminant:{type:"u8",value:28}},{name:"BurnNft",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"owner",isMut:!0,isSigner:!0,desc:"NFT owner"},{name:"mint",isMut:!0,isSigner:!1,desc:"Mint of the NFT"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token account to close"},{name:"masterEditionAccount",isMut:!0,isSigner:!1,desc:"MasterEdition2 of the NFT"},{name:"splTokenProgram",isMut:!1,isSigner:!1,desc:"SPL Token Program"},{name:"collectionMetadata",isMut:!0,isSigner:!1,desc:"Metadata of the Collection",optional:!0}],args:[],discriminant:{type:"u8",value:29}},{name:"VerifySizedCollectionItem",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!1,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!0,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:30}},{name:"UnverifySizedCollectionItem",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!1,isSigner:!0,desc:"Collection Authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!0,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:31}},{name:"SetAndVerifySizedCollectionItem",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!1,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"Update Authority of Collection NFT and NFT"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!0,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!0,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:32}},{name:"CreateMetadataAccountV3",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of token asset"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"update authority info"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"createMetadataAccountArgsV3",type:{defined:"CreateMetadataAccountArgsV3"}}],discriminant:{type:"u8",value:33}},{name:"SetCollectionSize",accounts:[{name:"collectionMetadata",isMut:!0,isSigner:!1,desc:"Collection Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[{name:"setCollectionSizeArgs",type:{defined:"SetCollectionSizeArgs"}}],discriminant:{type:"u8",value:34}},{name:"SetTokenStandard",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"updateAuthority",isMut:!0,isSigner:!0,desc:"Metadata update authority"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint account"},{name:"edition",isMut:!1,isSigner:!1,desc:"Edition account",optional:!0}],args:[],discriminant:{type:"u8",value:35}},{name:"BubblegumSetCollectionSize",accounts:[{name:"collectionMetadata",isMut:!0,isSigner:!1,desc:"Collection Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"bubblegumSigner",isMut:!1,isSigner:!0,desc:"Signing PDA of Bubblegum program"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[{name:"setCollectionSizeArgs",type:{defined:"SetCollectionSizeArgs"}}],discriminant:{type:"u8",value:36}},{name:"BurnEditionNft",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"owner",isMut:!0,isSigner:!0,desc:"NFT owner"},{name:"printEditionMint",isMut:!0,isSigner:!1,desc:"Mint of the print edition NFT"},{name:"masterEditionMint",isMut:!0,isSigner:!1,desc:"Mint of the original/master NFT"},{name:"printEditionTokenAccount",isMut:!0,isSigner:!1,desc:"Token account the print edition NFT is in"},{name:"masterEditionTokenAccount",isMut:!1,isSigner:!1,desc:"Token account the Master Edition NFT is in"},{name:"masterEditionAccount",isMut:!0,isSigner:!1,desc:"MasterEdition2 of the original NFT"},{name:"printEditionAccount",isMut:!0,isSigner:!1,desc:"Print Edition account of the NFT"},{name:"editionMarkerAccount",isMut:!0,isSigner:!1,desc:"Edition Marker PDA of the NFT"},{name:"splTokenProgram",isMut:!1,isSigner:!1,desc:"SPL Token Program"}],args:[],discriminant:{type:"u8",value:37}}],accounts:[{name:"UseAuthorityRecord",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"allowedUses",type:"u64"},{name:"bump",type:"u8"}]}},{name:"CollectionAuthorityRecord",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"bump",type:"u8"}]}},{name:"Metadata",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"updateAuthority",type:"publicKey"},{name:"mint",type:"publicKey"},{name:"data",type:{defined:"Data"}},{name:"primarySaleHappened",type:"bool"},{name:"isMutable",type:"bool"},{name:"editionNonce",type:{option:"u8"}},{name:"tokenStandard",type:{option:{defined:"TokenStandard"}}},{name:"collection",type:{option:{defined:"Collection"}}},{name:"uses",type:{option:{defined:"Uses"}}},{name:"collectionDetails",type:{option:{defined:"CollectionDetails"}}}]}},{name:"MasterEditionV2",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"supply",type:"u64"},{name:"maxSupply",type:{option:"u64"}}]}},{name:"MasterEditionV1",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"supply",type:"u64"},{name:"maxSupply",type:{option:"u64"}},{name:"printingMint",type:"publicKey"},{name:"oneTimePrintingAuthorizationMint",type:"publicKey"}]}},{name:"Edition",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"parent",type:"publicKey"},{name:"edition",type:"u64"}]}},{name:"ReservationListV2",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"masterEdition",type:"publicKey"},{name:"supplySnapshot",type:{option:"u64"}},{name:"reservations",type:{vec:{defined:"Reservation"}}},{name:"totalReservationSpots",type:"u64"},{name:"currentReservationSpots",type:"u64"}]}},{name:"ReservationListV1",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"masterEdition",type:"publicKey"},{name:"supplySnapshot",type:{option:"u64"}},{name:"reservations",type:{vec:{defined:"ReservationV1"}}}]}},{name:"EditionMarker",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"ledger",type:{array:["u8",31]}}]}}],types:[{name:"MintPrintingTokensViaTokenArgs",type:{kind:"struct",fields:[{name:"supply",type:"u64"}]}},{name:"SetReservationListArgs",type:{kind:"struct",fields:[{name:"reservations",type:{vec:{defined:"Reservation"}}},{name:"totalReservationSpots",type:{option:"u64"}},{name:"offset",type:"u64"},{name:"totalSpotOffset",type:"u64"}]}},{name:"UpdateMetadataAccountArgs",type:{kind:"struct",fields:[{name:"data",type:{option:{defined:"Data"}}},{name:"updateAuthority",type:{option:"publicKey"}},{name:"primarySaleHappened",type:{option:"bool"}}]}},{name:"UpdateMetadataAccountArgsV2",type:{kind:"struct",fields:[{name:"data",type:{option:{defined:"DataV2"}}},{name:"updateAuthority",type:{option:"publicKey"}},{name:"primarySaleHappened",type:{option:"bool"}},{name:"isMutable",type:{option:"bool"}}]}},{name:"CreateMetadataAccountArgs",type:{kind:"struct",fields:[{name:"data",type:{defined:"Data"}},{name:"isMutable",type:"bool"}]}},{name:"CreateMetadataAccountArgsV2",type:{kind:"struct",fields:[{name:"data",type:{defined:"DataV2"}},{name:"isMutable",type:"bool"}]}},{name:"CreateMetadataAccountArgsV3",type:{kind:"struct",fields:[{name:"data",type:{defined:"DataV2"}},{name:"isMutable",type:"bool"},{name:"collectionDetails",type:{option:{defined:"CollectionDetails"}}}]}},{name:"CreateMasterEditionArgs",type:{kind:"struct",fields:[{name:"maxSupply",type:{option:"u64"}}]}},{name:"MintNewEditionFromMasterEditionViaTokenArgs",type:{kind:"struct",fields:[{name:"edition",type:"u64"}]}},{name:"ApproveUseAuthorityArgs",type:{kind:"struct",fields:[{name:"numberOfUses",type:"u64"}]}},{name:"UtilizeArgs",type:{kind:"struct",fields:[{name:"numberOfUses",type:"u64"}]}},{name:"SetCollectionSizeArgs",type:{kind:"struct",fields:[{name:"size",type:"u64"}]}},{name:"Data",type:{kind:"struct",fields:[{name:"name",type:"string"},{name:"symbol",type:"string"},{name:"uri",type:"string"},{name:"sellerFeeBasisPoints",type:"u16"},{name:"creators",type:{option:{vec:{defined:"Creator"}}}}]}},{name:"DataV2",type:{kind:"struct",fields:[{name:"name",type:"string"},{name:"symbol",type:"string"},{name:"uri",type:"string"},{name:"sellerFeeBasisPoints",type:"u16"},{name:"creators",type:{option:{vec:{defined:"Creator"}}}},{name:"collection",type:{option:{defined:"Collection"}}},{name:"uses",type:{option:{defined:"Uses"}}}]}},{name:"Uses",type:{kind:"struct",fields:[{name:"useMethod",type:{defined:"UseMethod"}},{name:"remaining",type:"u64"},{name:"total",type:"u64"}]}},{name:"Collection",type:{kind:"struct",fields:[{name:"verified",type:"bool"},{name:"key",type:"publicKey"}]}},{name:"Creator",type:{kind:"struct",fields:[{name:"address",type:"publicKey"},{name:"verified",type:"bool"},{name:"share",type:"u8"}]}},{name:"Reservation",type:{kind:"struct",fields:[{name:"address",type:"publicKey"},{name:"spotsRemaining",type:"u64"},{name:"totalSpots",type:"u64"}]}},{name:"ReservationV1",type:{kind:"struct",fields:[{name:"address",type:"publicKey"},{name:"spotsRemaining",type:"u8"},{name:"totalSpots",type:"u8"}]}},{name:"Key",type:{kind:"enum",variants:[{name:"Uninitialized"},{name:"EditionV1"},{name:"MasterEditionV1"},{name:"ReservationListV1"},{name:"MetadataV1"},{name:"ReservationListV2"},{name:"MasterEditionV2"},{name:"EditionMarker"},{name:"UseAuthorityRecord"},{name:"CollectionAuthorityRecord"}]}},{name:"UseMethod",type:{kind:"enum",variants:[{name:"Burn"},{name:"Multiple"},{name:"Single"}]}},{name:"CollectionDetails",type:{kind:"enum",variants:[{name:"V1",fields:[{name:"size",type:"u64"}]}]}},{name:"TokenStandard",type:{kind:"enum",variants:[{name:"NonFungible"},{name:"FungibleAsset"},{name:"Fungible"},{name:"NonFungibleEdition"}]}}],errors:[{code:0,name:"InstructionUnpackError",msg:"Failed to unpack instruction data"},{code:1,name:"InstructionPackError",msg:"Failed to pack instruction data"},{code:2,name:"NotRentExempt",msg:"Lamport balance below rent-exempt threshold"},{code:3,name:"AlreadyInitialized",msg:"Already initialized"},{code:4,name:"Uninitialized",msg:"Uninitialized"},{code:5,name:"InvalidMetadataKey",msg:" Metadata's key must match seed of ['metadata', program id, mint] provided"},{code:6,name:"InvalidEditionKey",msg:"Edition's key must match seed of ['metadata', program id, name, 'edition'] provided"},{code:7,name:"UpdateAuthorityIncorrect",msg:"Update Authority given does not match"},{code:8,name:"UpdateAuthorityIsNotSigner",msg:"Update Authority needs to be signer to update metadata"},{code:9,name:"NotMintAuthority",msg:"You must be the mint authority and signer on this transaction"},{code:10,name:"InvalidMintAuthority",msg:"Mint authority provided does not match the authority on the mint"},{code:11,name:"NameTooLong",msg:"Name too long"},{code:12,name:"SymbolTooLong",msg:"Symbol too long"},{code:13,name:"UriTooLong",msg:"URI too long"},{code:14,name:"UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner",msg:"Update authority must be equivalent to the metadata's authority and also signer of this transaction"},{code:15,name:"MintMismatch",msg:"Mint given does not match mint on Metadata"},{code:16,name:"EditionsMustHaveExactlyOneToken",msg:"Editions must have exactly one token"},{code:17,name:"MaxEditionsMintedAlready",msg:"Maximum editions printed already"},{code:18,name:"TokenMintToFailed",msg:"Token mint to failed"},{code:19,name:"MasterRecordMismatch",msg:"The master edition record passed must match the master record on the edition given"},{code:20,name:"DestinationMintMismatch",msg:"The destination account does not have the right mint"},{code:21,name:"EditionAlreadyMinted",msg:"An edition can only mint one of its kind!"},{code:22,name:"PrintingMintDecimalsShouldBeZero",msg:"Printing mint decimals should be zero"},{code:23,name:"OneTimePrintingAuthorizationMintDecimalsShouldBeZero",msg:"OneTimePrintingAuthorization mint decimals should be zero"},{code:24,name:"EditionMintDecimalsShouldBeZero",msg:"EditionMintDecimalsShouldBeZero"},{code:25,name:"TokenBurnFailed",msg:"Token burn failed"},{code:26,name:"TokenAccountOneTimeAuthMintMismatch",msg:"The One Time authorization mint does not match that on the token account!"},{code:27,name:"DerivedKeyInvalid",msg:"Derived key invalid"},{code:28,name:"PrintingMintMismatch",msg:"The Printing mint does not match that on the master edition!"},{code:29,name:"OneTimePrintingAuthMintMismatch",msg:"The One Time Printing Auth mint does not match that on the master edition!"},{code:30,name:"TokenAccountMintMismatch",msg:"The mint of the token account does not match the Printing mint!"},{code:31,name:"TokenAccountMintMismatchV2",msg:"The mint of the token account does not match the master metadata mint!"},{code:32,name:"NotEnoughTokens",msg:"Not enough tokens to mint a limited edition"},{code:33,name:"PrintingMintAuthorizationAccountMismatch",msg:"The mint on your authorization token holding account does not match your Printing mint!"},{code:34,name:"AuthorizationTokenAccountOwnerMismatch",msg:"The authorization token account has a different owner than the update authority for the master edition!"},{code:35,name:"Disabled",msg:"This feature is currently disabled."},{code:36,name:"CreatorsTooLong",msg:"Creators list too long"},{code:37,name:"CreatorsMustBeAtleastOne",msg:"Creators must be at least one if set"},{code:38,name:"MustBeOneOfCreators",msg:"If using a creators array, you must be one of the creators listed"},{code:39,name:"NoCreatorsPresentOnMetadata",msg:"This metadata does not have creators"},{code:40,name:"CreatorNotFound",msg:"This creator address was not found"},{code:41,name:"InvalidBasisPoints",msg:"Basis points cannot be more than 10000"},{code:42,name:"PrimarySaleCanOnlyBeFlippedToTrue",msg:"Primary sale can only be flipped to true and is immutable"},{code:43,name:"OwnerMismatch",msg:"Owner does not match that on the account given"},{code:44,name:"NoBalanceInAccountForAuthorization",msg:"This account has no tokens to be used for authorization"},{code:45,name:"ShareTotalMustBe100",msg:"Share total must equal 100 for creator array"},{code:46,name:"ReservationExists",msg:"This reservation list already exists!"},{code:47,name:"ReservationDoesNotExist",msg:"This reservation list does not exist!"},{code:48,name:"ReservationNotSet",msg:"This reservation list exists but was never set with reservations"},{code:49,name:"ReservationAlreadyMade",msg:"This reservation list has already been set!"},{code:50,name:"BeyondMaxAddressSize",msg:"Provided more addresses than max allowed in single reservation"},{code:51,name:"NumericalOverflowError",msg:"NumericalOverflowError"},{code:52,name:"ReservationBreachesMaximumSupply",msg:"This reservation would go beyond the maximum supply of the master edition!"},{code:53,name:"AddressNotInReservation",msg:"Address not in reservation!"},{code:54,name:"CannotVerifyAnotherCreator",msg:"You cannot unilaterally verify another creator, they must sign"},{code:55,name:"CannotUnverifyAnotherCreator",msg:"You cannot unilaterally unverify another creator"},{code:56,name:"SpotMismatch",msg:"In initial reservation setting, spots remaining should equal total spots"},{code:57,name:"IncorrectOwner",msg:"Incorrect account owner"},{code:58,name:"PrintingWouldBreachMaximumSupply",msg:"printing these tokens would breach the maximum supply limit of the master edition"},{code:59,name:"DataIsImmutable",msg:"Data is immutable"},{code:60,name:"DuplicateCreatorAddress",msg:"No duplicate creator addresses"},{code:61,name:"ReservationSpotsRemainingShouldMatchTotalSpotsAtStart",msg:"Reservation spots remaining should match total spots when first being created"},{code:62,name:"InvalidTokenProgram",msg:"Invalid token program"},{code:63,name:"DataTypeMismatch",msg:"Data type mismatch"},{code:64,name:"BeyondAlottedAddressSize",msg:"Beyond alotted address size in reservation!"},{code:65,name:"ReservationNotComplete",msg:"The reservation has only been partially alotted"},{code:66,name:"TriedToReplaceAnExistingReservation",msg:"You cannot splice over an existing reservation!"},{code:67,name:"InvalidOperation",msg:"Invalid operation"},{code:68,name:"InvalidOwner",msg:"Invalid Owner"},{code:69,name:"PrintingMintSupplyMustBeZeroForConversion",msg:"Printing mint supply must be zero for conversion"},{code:70,name:"OneTimeAuthMintSupplyMustBeZeroForConversion",msg:"One Time Auth mint supply must be zero for conversion"},{code:71,name:"InvalidEditionIndex",msg:"You tried to insert one edition too many into an edition mark pda"},{code:72,name:"ReservationArrayShouldBeSizeOne",msg:"In the legacy system the reservation needs to be of size one for cpu limit reasons"},{code:73,name:"IsMutableCanOnlyBeFlippedToFalse",msg:"Is Mutable can only be flipped to false"},{code:74,name:"CollectionCannotBeVerifiedInThisInstruction",msg:"Cannont Verify Collection in this Instruction"},{code:75,name:"Removed",msg:"This instruction was deprecated in a previous release and is now removed"},{code:76,name:"MustBeBurned",msg:"This token use method is burn and there are no remaining uses, it must be burned"},{code:77,name:"InvalidUseMethod",msg:"This use method is invalid"},{code:78,name:"CannotChangeUseMethodAfterFirstUse",msg:"Cannot Change Use Method after the first use"},{code:79,name:"CannotChangeUsesAfterFirstUse",msg:"Cannot Change Remaining or Available uses after the first use"},{code:80,name:"CollectionNotFound",msg:"Collection Not Found on Metadata"},{code:81,name:"InvalidCollectionUpdateAuthority",msg:"Collection Update Authority is invalid"},{code:82,name:"CollectionMustBeAUniqueMasterEdition",msg:"Collection Must Be a Unique Master Edition v2"},{code:83,name:"UseAuthorityRecordAlreadyExists",msg:"The Use Authority Record Already Exists, to modify it Revoke, then Approve"},{code:84,name:"UseAuthorityRecordAlreadyRevoked",msg:"The Use Authority Record is empty or already revoked"},{code:85,name:"Unusable",msg:"This token has no uses"},{code:86,name:"NotEnoughUses",msg:"There are not enough Uses left on this token."},{code:87,name:"CollectionAuthorityRecordAlreadyExists",msg:"This Collection Authority Record Already Exists."},{code:88,name:"CollectionAuthorityDoesNotExist",msg:"This Collection Authority Record Does Not Exist."},{code:89,name:"InvalidUseAuthorityRecord",msg:"This Use Authority Record is invalid."},{code:90,name:"InvalidCollectionAuthorityRecord",msg:"This Collection Authority Record is invalid."},{code:91,name:"InvalidFreezeAuthority",msg:"Metadata does not match the freeze authority on the mint"},{code:92,name:"InvalidDelegate",msg:"All tokens in this account have not been delegated to this user."},{code:93,name:"CannotAdjustVerifiedCreator",msg:"Creator can not be adjusted once they are verified."},{code:94,name:"CannotRemoveVerifiedCreator",msg:"Verified creators cannot be removed."},{code:95,name:"CannotWipeVerifiedCreators",msg:"Can not wipe verified creators."},{code:96,name:"NotAllowedToChangeSellerFeeBasisPoints",msg:"Not allowed to change seller fee basis points."},{code:97,name:"EditionOverrideCannotBeZero",msg:"Edition override cannot be zero"},{code:98,name:"InvalidUser",msg:"Invalid User"},{code:99,name:"RevokeCollectionAuthoritySignerIncorrect",msg:"Revoke Collection Authority signer is incorrect"},{code:100,name:"TokenCloseFailed",msg:"Token close failed"},{code:101,name:"UnsizedCollection",msg:"Can't use this function on unsized collection"},{code:102,name:"SizedCollection",msg:"Can't use this function on a sized collection"},{code:103,name:"MissingCollectionMetadata",msg:"Can't burn a verified member of a collection w/o providing collection metadata account"},{code:104,name:"NotAMemberOfCollection",msg:"This NFT is not a member of the specified collection."},{code:105,name:"NotVerifiedMemberOfCollection",msg:"This NFT is not a verified member of the specified collection."},{code:106,name:"NotACollectionParent",msg:"This NFT is not a collection parent NFT."},{code:107,name:"CouldNotDetermineTokenStandard",msg:"Could not determine a TokenStandard type."},{code:108,name:"MissingEditionAccount",msg:"This mint account has an edition but none was provided."},{code:109,name:"NotAMasterEdition",msg:"This edition is not a Master Edition"},{code:110,name:"MasterEditionHasPrints",msg:"This Master Edition has existing prints"},{code:111,name:"BorshDeserializationError",msg:"Borsh Deserialization Error"},{code:112,name:"CannotUpdateVerifiedCollection",msg:"Cannot update a verified colleciton in this command"},{code:113,name:"CollectionMasterEditionAccountInvalid",msg:"Edition account doesnt match collection "},{code:114,name:"AlreadyVerified",msg:"Item is already verified."},{code:115,name:"AlreadyUnverified",msg:"Item is already unverified."},{code:116,name:"NotAPrintEdition",msg:"This edition is not a Print Edition"},{code:117,name:"InvalidMasterEdition",msg:"Invalid Master Edition"},{code:118,name:"InvalidPrintEdition",msg:"Invalid Print Edition"},{code:119,name:"InvalidEditionMarker",msg:"Invalid Edition Marker"},{code:120,name:"ReservationListDeprecated",msg:"Reservation List is Deprecated"},{code:121,name:"PrintEditionDoesNotMatchMasterEdition",msg:"Print Edition does not match Master Edition"}],metadata:{origin:"shank",address:"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",binaryVersion:"0.0.8",libVersion:"~0.0.4"}}},6312:function(e,t,i){i.r(t),i.d(t,{assets:function(){return S},contentTitle:function(){return A},default:function(){return E},frontMatter:function(){return k},metadata:function(){return v},toc:function(){return T}});var n=i(83117),a=i(67294),o=i(3905),r=i(45697),s=i.n(r),d=i(96486),c=i(39960),l=i(38545),u=i(35213),m=i(15019);function p(e){let{idl:t,instruction:i,children:n}=e;return i=(0,u.M1)(t,i),a.createElement(l.U,null,a.createElement(l.Q,{key:"description",title:"Description",open:!0},a.createElement("div",{className:"accordion-item-padding"},n,a.createElement(h,{instruction:i}))),a.createElement(g,{key:"accounts",accounts:i.accounts}),i.resolvedArgs.length>0&&a.createElement(m.A,{fields:i.resolvedArgs,title:"Arguments",firstColumn:"Argument"}))}function h(e){let{instruction:t}=e;return a.createElement("div",{className:"program-instruction-details"},a.createElement("ul",null,a.createElement("li",null,a.createElement("strong",null,"Name"),": ",a.createElement("code",null,t.name)),a.createElement("li",null,a.createElement("strong",null,"Discriminator"),":"," ",a.createElement("code",null,t.discriminant.value)," (",t.discriminant.type,")")))}function g(e){let{accounts:t}=e;return a.createElement(l.Q,{title:"Accounts"},a.createElement("div",{className:"accordion-table-overflow"},a.createElement("table",{className:"accordion-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{minWidth:"10rem"}},"Name"),a.createElement("th",null,"Type"),a.createElement("th",{style:{minWidth:"25rem"}},"Description"))),a.createElement("tbody",null,t.map((e=>a.createElement("tr",{key:e.name},a.createElement("th",null,(0,d.startCase)(e.name)),a.createElement("td",null,a.createElement("div",{style:{display:"flex"}},a.createElement(c.Z,{href:"/programs/#signer-andor-writable-accounts",className:["program-instruction-account-icon",e.isMut?"active":""].join(" "),title:e.isMut?"Writable":"Not Writable"},a.createElement(y,null)),a.createElement(c.Z,{href:"/programs/#signer-andor-writable-accounts",className:["program-instruction-account-icon",e.isSigner?"active":""].join(" "),title:e.isSigner?"Signer":"Not a Signer"},a.createElement(f,null)))),a.createElement("td",null,a.createElement("div",{dangerouslySetInnerHTML:{__html:e.desc}})))))))))}function y(){return a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",fill:"currentColor",viewBox:"0 0 256 256"},a.createElement("rect",{width:"256",height:"256",fill:"none"}),a.createElement("path",{d:"M92.7,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4l-120,120A7.9,7.9,0,0,1,92.7,216Z",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("line",{x1:"136",y1:"64",x2:"192",y2:"120",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("polyline",{points:"164 200 204 160 192 120",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("line",{x1:"44",y1:"156",x2:"100",y2:"212",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}))}function f(){return a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",fill:"currentColor",viewBox:"0 0 256 256"},a.createElement("rect",{width:"256",height:"256",fill:"none"}),a.createElement("path",{d:"M176,128a240.3,240.3,0,0,1-17.9,91.2",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("path",{d:"M163.8,96A48,48,0,0,0,80,128a142.6,142.6,0,0,1-18,69.7",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("path",{d:"M96,37.5A94.4,94.4,0,0,1,128,32a96,96,0,0,1,96,96,293.3,293.3,0,0,1-7.1,64",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("path",{d:"M23.3,168A95.5,95.5,0,0,0,32,128,95.4,95.4,0,0,1,64,56.5",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("path",{d:"M110.6,208c-2.1,4.4-4.3,8.8-6.6,13",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),a.createElement("path",{d:"M128,128a189.6,189.6,0,0,1-6.1,48",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}))}p.propTypes={idl:s().object.isRequired,instruction:s().string.isRequired,children:s().any},h.propTypes={instruction:s().object.isRequired},g.propTypes={accounts:s().array.isRequired};var M=i(90263);const k={description:"A deep dive on the instruction handlers."},A="Instructions",v={unversionedId:"programs/token-metadata/instructions",id:"programs/token-metadata/instructions",title:"Instructions",description:"A deep dive on the instruction handlers.",source:"@site/docs/01-programs/01-token-metadata/03-instructions.md",sourceDirName:"01-programs/01-token-metadata",slug:"/programs/token-metadata/instructions",permalink:"/programs/token-metadata/instructions",draft:!1,editUrl:"https://github.com/metaplex/docs/tree/main/docs/01-programs/01-token-metadata/03-instructions.md",tags:[],version:"current",lastUpdatedAt:1665661318,formattedLastUpdatedAt:"Oct 13, 2022",sidebarPosition:3,frontMatter:{description:"A deep dive on the instruction handlers."},sidebar:"sidebar",previous:{title:"Accounts",permalink:"/programs/token-metadata/accounts"},next:{title:"Token Standard",permalink:"/programs/token-metadata/token-standard"}},S={},T=[{value:"Create a Metadata account",id:"create-a-metadata-account",level:2},{value:"Update a Metadata account",id:"update-a-metadata-account",level:2},{value:"Burn a NFT",id:"burn-a-nft",level:2},{value:"Burn an Edition NFT",id:"burn-an-edition-nft",level:2},{value:"Indicate the primary sale has happened",id:"indicate-the-primary-sale-has-happened",level:2},{value:"Verify a creator",id:"verify-a-creator",level:2},{value:"Unverify a creator",id:"unverify-a-creator",level:2},{value:"Create a Master Edition account",id:"create-a-master-edition-account",level:2},{value:"Print a new Edition from a Master Edition",id:"print-a-new-edition-from-a-master-edition",level:2},{value:"Via owning the token",id:"via-owning-the-token",level:3},{value:"Via a Vault proxy",id:"via-a-vault-proxy",level:3},{value:"Verify a collection item",id:"verify-a-collection-item",level:2},{value:"Verify a sized collection item",id:"verify-a-sized-collection-item",level:2},{value:"Unverify a collection item",id:"unverify-a-collection-item",level:2},{value:"Unverify a sized collection item",id:"unverify-a-sized-collection-item",level:2},{value:"Set and verify the collection",id:"set-and-verify-the-collection",level:2},{value:"Set and verify a sized collection item",id:"set-and-verify-a-sized-collection-item",level:2},{value:"Approve a new Collection Authority",id:"approve-a-new-collection-authority",level:2},{value:"Revoke an existing Collection Authority",id:"revoke-an-existing-collection-authority",level:2},{value:"Reduce the number of uses",id:"reduce-the-number-of-uses",level:2},{value:"Approve a new Use Authority",id:"approve-a-new-use-authority",level:2},{value:"Revoke an existing Use Authority",id:"revoke-an-existing-use-authority",level:2},{value:"Freeze the token account as a delegate",id:"freeze-the-token-account-as-a-delegate",level:2},{value:"Thaw the token account as a delegate",id:"thaw-the-token-account-as-a-delegate",level:2},{value:"Add padding to Metadata account fields",id:"add-padding-to-metadata-account-fields",level:2},{value:"Upgrade Master Edition from V1 to V2",id:"upgrade-master-edition-from-v1-to-v2",level:2},{value:"Set collection size",id:"set-collection-size",level:2},{value:"Set token standard",id:"set-token-standard",level:2}],b={toc:T};function E(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"instructions"},"Instructions"),(0,o.kt)("h2",{id:"create-a-metadata-account"},"Create a Metadata account"),(0,o.kt)(p,{idl:M.Z,instruction:"CreateMetadataAccountV3",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(76459).Z,width:"2100",height:"528"})),(0,o.kt)("p",null,"This instruction creates and initializes a new ",(0,o.kt)("a",{parentName:"p",href:"./accounts#metadata"},"Metadata")," account for a given Mint account. It is required that the Mint account has been created and initialized by the Token Program before executing this instruction.")),(0,o.kt)("h2",{id:"update-a-metadata-account"},"Update a Metadata account"),(0,o.kt)(p,{idl:M.Z,instruction:"UpdateMetadataAccountV2",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(63224).Z,width:"2100",height:"960"})),(0,o.kt)("p",null,"This instruction enables us to update parts of the Metadata account. Note that some fields have constraints limiting how they can be updated. For instance, once the ",(0,o.kt)("inlineCode",{parentName:"p"},"Is Mutable")," field is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),", it cannot be changed back to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,o.kt)("h2",{id:"burn-a-nft"},"Burn a NFT"),(0,o.kt)(p,{idl:M.Z,instruction:"BurnNft",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction enables the owner of the NFT to completely burn it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"burning the SPL token and closing the token account"),(0,o.kt)("li",{parentName:"ul"},"closing the metadata and edition accounts"),(0,o.kt)("li",{parentName:"ul"},"giving the owner the reclaimed funds from closing these accounts")),(0,o.kt)("p",null,"This handler checks if the NFT is a member of a verified collection, and if it is, requires the collection metadata account be passed in so the size can be decremented."),(0,o.kt)("p",null,'This handler will not close metadata and edition accounts where the token has already been burned and the mint has a supply of 0. At that point there is no official "owner" of the NFT.')),(0,o.kt)("h2",{id:"burn-an-edition-nft"},"Burn an Edition NFT"),(0,o.kt)(p,{idl:M.Z,instruction:"BurnEditionNft",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction enables the owner of a Print Edition NFT to completely burn it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"burning the SPL token and closing the token account"),(0,o.kt)("li",{parentName:"ul"},"closing the metadata and edition accounts"),(0,o.kt)("li",{parentName:"ul"},"giving the owner the reclaimed funds from closing these accounts")),(0,o.kt)("p",null,"This handler checks if the NFT is a Print Edition and not a Master edition, and decrements the Master Edition supply fields after burning the NFT."),(0,o.kt)("p",null,"The Master Edition ",(0,o.kt)("inlineCode",{parentName:"p"},"supply")," is decremented every time a Print Edition is burned. If the owner of the Master Edition is not the same as the owner of the Print Edition, the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_supply")," is also decremented. "),(0,o.kt)("p",null,'Print Editions burned by the owner ("the creator") of the Master Edition can be reminted, but print editions burned by other owners ("users") cannot be reminted.'),(0,o.kt)("p",null,'This handler will not close metadata and edition accounts where the token has already been burned and the mint has a supply of 0. At that point there is no official "owner" of the NFT.')),(0,o.kt)("h2",{id:"indicate-the-primary-sale-has-happened"},"Indicate the primary sale has happened"),(0,o.kt)(p,{idl:M.Z,instruction:"UpdatePrimarySaleHappenedViaToken",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(56855).Z,width:"2100",height:"408"})),(0,o.kt)("p",null,"This instruction flips the ",(0,o.kt)("inlineCode",{parentName:"p"},"Primary Sale Happened")," flag to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", indicating that the first sale has happened. Note that this field is ",(0,o.kt)("a",{parentName:"p",href:"/programs/#indicative-fields"},"indicative")," and is typically used by marketplaces to calculate royalties.")),(0,o.kt)("h2",{id:"verify-a-creator"},"Verify a creator"),(0,o.kt)(p,{idl:M.Z,instruction:"SignMetadata",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(32868).Z,width:"2100",height:"384"})),(0,o.kt)("p",null,"This instruction verifies one creator on the Metadata account. As long as the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Creator")," account signs the transaction, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Verified")," boolean will be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," on the appropriate creator of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Creators")," array.")),(0,o.kt)("h2",{id:"unverify-a-creator"},"Unverify a creator"),(0,o.kt)(p,{idl:M.Z,instruction:"RemoveCreatorVerification",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(61089).Z,width:"2100",height:"408"})),(0,o.kt)("p",null,"This instruction unverifies one creator on the Metadata account. As long as the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Creator")," account signs the transaction, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Verified")," boolean will be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," on the appropriate creator of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Creators")," array.")),(0,o.kt)("h2",{id:"create-a-master-edition-account"},"Create a Master Edition account"),(0,o.kt)(p,{idl:M.Z,instruction:"CreateMasterEditionV3",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(37115).Z,width:"2100",height:"528"})),(0,o.kt)("p",null,"This instruction creates and initializes a new ",(0,o.kt)("a",{parentName:"p",href:"./accounts#master-edition"},"Master Edition")," account for a given Mint account. It requires the following conditions to be met:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Mint account has been created and initialized by the Token Program."),(0,o.kt)("li",{parentName:"ul"},"The Mint account has zero decimals."),(0,o.kt)("li",{parentName:"ul"},"The Mint account has a supply of exactly 1 token.")),(0,o.kt)("p",null,"If these conditions are met, ",(0,o.kt)("strong",{parentName:"p"},"it will transfer the Mint Authority and the Freeze Authority from the Mint account")," to the Master Edition PDA (",(0,o.kt)("a",{parentName:"p",href:"./faq#why-are-the-mint-and-freeze-authorities-transferred-to-the-edition-pdaO"},"Check the FAQ to understand why"),").")),(0,o.kt)("h2",{id:"print-a-new-edition-from-a-master-edition"},"Print a new Edition from a Master Edition"),(0,o.kt)("h3",{id:"via-owning-the-token"},"Via owning the token"),(0,o.kt)(p,{idl:M.Z,instruction:"MintNewEditionFromMasterEditionViaToken",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(9846).Z,width:"2100",height:"1344"})),(0,o.kt)("p",null,"Given a Masted Edition, this instruction creates a new Edition derived from a new Mint account."),(0,o.kt)("p",null,"It requires the owner of the Master Edition's Token account to sign the transaction, to prove they are allowed to print new editions from it."),(0,o.kt)("p",null,"It requires the same conditions as the Master Edition account regarding the Mint account, and it will also ",(0,o.kt)("strong",{parentName:"p"},"transfer the Mint Authority and the Freeze Authority from the Mint account")," to the new Edition PDA (",(0,o.kt)("a",{parentName:"p",href:"./faq#why-are-the-mint-and-freeze-authorities-transferred-to-the-edition-pda"},"Check the FAQ to understand why"),").")),(0,o.kt)("h3",{id:"via-a-vault-proxy"},"Via a Vault proxy"),(0,o.kt)(p,{idl:M.Z,instruction:"MintNewEditionFromMasterEditionViaVaultProxy",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction is very similar to the one above, but it uses a Vault proxy instead of a Token account to prove we are allowed to print new editions from the given Master Edition."),(0,o.kt)("p",null,"It requires the same conditions as the Master Edition account regarding the Mint account, and it will also ",(0,o.kt)("strong",{parentName:"p"},"transfer the Mint Authority and the Freeze Authority from the Mint account")," to the new Edition PDA (",(0,o.kt)("a",{parentName:"p",href:"./faq#why-are-the-mint-and-freeze-authorities-transferred-to-the-edition-pda"},"Check the FAQ to understand why"),").")),(0,o.kt)("h2",{id:"verify-a-collection-item"},"Verify a collection item"),(0,o.kt)(p,{idl:M.Z,instruction:"VerifyCollection",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(36238).Z,width:"2616",height:"432"})),(0,o.kt)("p",null,"This instruction verifies the collection of a Metadata account for unsized parent NFTs, by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"Verified")," boolean to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field. Calling it on a collection whose parent NFT has a size field will throw an error."),(0,o.kt)("p",null,"Clients should detect if a NFT is part of a sized collection or not and call the appropriate handler for the user to abstract away this detail.")),(0,o.kt)("h2",{id:"verify-a-sized-collection-item"},"Verify a sized collection item"),(0,o.kt)(p,{idl:M.Z,instruction:"VerifySizedCollectionItem",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(45043).Z,width:"2616",height:"432"})),(0,o.kt)("p",null,"This instruction verifies the collection of a Metadata account, by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"Verified")," boolean to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field, and increments the size field of the parent NFT. Calling it on a collection whose parent NFT does not have a size field will throw an error. "),(0,o.kt)("p",null,"Clients should detect if a NFT is part of a sized collection or not and call the appropriate handler for the user to abstract away this detail.")),(0,o.kt)("h2",{id:"unverify-a-collection-item"},"Unverify a collection item"),(0,o.kt)(p,{idl:M.Z,instruction:"UnverifyCollection",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(41348).Z,width:"2616",height:"432"})),(0,o.kt)("p",null,"This instruction unverifies the collection of a Metadata account for unsized parent NFTs, by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"Verified")," boolean to ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field. Calling it on a collection whose parent NFT has a size field will throw an error."),(0,o.kt)("p",null,"Clients should detect if a NFT is part of a sized collection or not and call the appropriate handler for the user to abstract away this detail.")),(0,o.kt)("h2",{id:"unverify-a-sized-collection-item"},"Unverify a sized collection item"),(0,o.kt)(p,{idl:M.Z,instruction:"UnverifySizedCollectionItem",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(90465).Z,width:"2616",height:"432"})),(0,o.kt)("p",null,"This instruction unverifies the collection of a Metadata account, by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"Verified")," boolean to ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field, and increments the size field of the parent NFT. Calling it on a collection whose parent NFT does not have a size field will throw an error."),(0,o.kt)("p",null,"Clients should detect if a NFT is part of a sized collection or not and call the appropriate handler for the user to abstract away this detail.")),(0,o.kt)("h2",{id:"set-and-verify-the-collection"},"Set and verify the collection"),(0,o.kt)(p,{idl:M.Z,instruction:"SetAndVerifyCollection",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction updates the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field of a Metadata account using the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection Mint")," account as long as its ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection Authority")," signs the transaction and the parent NFT does not have the collection details field populated (unsized)."),(0,o.kt)("p",null,"Clients should detect if a NFT is part of a sized collection or not and call the appropriate handler for the user to abstract away this detail.")),(0,o.kt)("h2",{id:"set-and-verify-a-sized-collection-item"},"Set and verify a sized collection item"),(0,o.kt)(p,{idl:M.Z,instruction:"SetAndVerifySizedCollectionItem",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction updates the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field of a Metadata account for sized collections using the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection Mint")," account as long as its ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection Authority")," signs the transaction and the parent NFT has the collection details field populated (sized)."),(0,o.kt)("p",null,"Clients should detect if a NFT is part of a sized collection or not and call the appropriate handler for the user to abstract away this detail.")),(0,o.kt)("h2",{id:"approve-a-new-collection-authority"},"Approve a new Collection Authority"),(0,o.kt)(p,{idl:M.Z,instruction:"ApproveCollectionAuthority",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(79827).Z,width:"2100",height:"528"})),(0,o.kt)("p",null,"This instruction allows the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"New Collection Authority")," account to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field of a Metadata account."),(0,o.kt)("p",null,"The program keeps track of all the collection authorities that have been approved using ",(0,o.kt)("a",{parentName:"p",href:"./accounts#collection-authority-record"},"Collection Authority Record")," PDAs.")),(0,o.kt)("h2",{id:"revoke-an-existing-collection-authority"},"Revoke an existing Collection Authority"),(0,o.kt)(p,{idl:M.Z,instruction:"RevokeCollectionAuthority",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(92041).Z,width:"2100",height:"528"})),(0,o.kt)("p",null,"This instruction revokes an existing collection authority, meaning they will no longer be able to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," field of the Metadata account associated with that Mint account."),(0,o.kt)("p",null,"It does this by deleting the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection Authority Record")," PDA.")),(0,o.kt)("h2",{id:"reduce-the-number-of-uses"},"Reduce the number of uses"),(0,o.kt)(p,{idl:M.Z,instruction:"Utilize",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(90130).Z,width:"2100",height:"408"})),(0,o.kt)("p",null,"This instruction reduces the number of uses of a Metadata account."),(0,o.kt)("p",null,"This can either be done by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Update Authority")," of the Metadata account or by an approved ",(0,o.kt)("inlineCode",{parentName:"p"},"Use Authority"),".")),(0,o.kt)("h2",{id:"approve-a-new-use-authority"},"Approve a new Use Authority"),(0,o.kt)(p,{idl:M.Z,instruction:"ApproveUseAuthority",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(74456).Z,width:"2100",height:"528"})),(0,o.kt)("p",null,"This instruction allows the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," account to utilize a Metadata account."),(0,o.kt)("p",null,"The program keeps track of all the use authorities that have been approved via ",(0,o.kt)("a",{parentName:"p",href:"./accounts#use-authority-record"},"Use Authority Record")," PDAs.")),(0,o.kt)("h2",{id:"revoke-an-existing-use-authority"},"Revoke an existing Use Authority"),(0,o.kt)(p,{idl:M.Z,instruction:"RevokeUseAuthority",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(9284).Z,width:"2100",height:"528"})),(0,o.kt)("p",null,"This instruction revokes an existing use authority, meaning they will no longer be able to reduce the uses of the Metadata account associated with that Mint account."),(0,o.kt)("p",null,"It does this by deleting the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Use Authority Record")," PDA.")),(0,o.kt)("h2",{id:"freeze-the-token-account-as-a-delegate"},"Freeze the token account as a delegate"),(0,o.kt)(p,{idl:M.Z,instruction:"FreezeDelegatedAccount",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction freezes a Token account but only if you are the Delegate Authority of the Token account."),(0,o.kt)("p",null,"Because Mint Authority and Freeze Authority of NFTs are transferred to the Master Edition / Edition PDA, this instruction is the only way for a delegate to prevent the owner of an NFT to transfer it."),(0,o.kt)("p",null,"This enables a variety of use-cases such as preventing someone to sell its NFT whilst being listed in an escrowless marketplace."),(0,o.kt)("p",null,"Here's a small guide on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/metaplex-foundation/metaplex-program-library/issues/470#issuecomment-1132700105"},"how to freeze a Token account using this instruction"),".")),(0,o.kt)("h2",{id:"thaw-the-token-account-as-a-delegate"},"Thaw the token account as a delegate"),(0,o.kt)(p,{idl:M.Z,instruction:"ThawDelegatedAccount",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction reverts the instruction above by unfreezing a Token account, only if you are the Delegate Authority of the Token account.")),(0,o.kt)("h2",{id:"add-padding-to-metadata-account-fields"},"Add padding to Metadata account fields"),(0,o.kt)(p,{idl:M.Z,instruction:"PuffMetadata",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction adds padding to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Symbol")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"URI")," strings of the provided Metadata account. As a result, these fields will have a fixed size and will be easier to filter."),(0,o.kt)("p",null,"Note that, this is automatically done by the Token Metadata program when creating and updating Metadata accounts. This instruction serves as a migration tool for old NFTs that do not have that padding.")),(0,o.kt)("h2",{id:"upgrade-master-edition-from-v1-to-v2"},"Upgrade Master Edition from V1 to V2"),(0,o.kt)(p,{idl:M.Z,instruction:"ConvertMasterEditionV1ToV2",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,"This instruction serves as a migration tool that upgrades a Master Edition account of an NFT from V1 to V2.")),(0,o.kt)("h2",{id:"set-collection-size"},"Set collection size"),(0,o.kt)(p,{idl:M.Z,instruction:"SetCollectionSize",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(47012).Z,width:"2088",height:"432"})),(0,o.kt)("p",null,"This instruction allows the update authority of a collection parent NFT to set the size of the collection ",(0,o.kt)("strong",{parentName:"p"},"once")," in order to allow existing unsized collections to be updated to track size. Once a collection is sized it can only be verified and unverified by the sized handlers and can't be changed back to unsized. ")),(0,o.kt)("h2",{id:"set-token-standard"},"Set token standard"),(0,o.kt)(p,{idl:M.Z,instruction:"SetTokenStandard",mdxType:"ProgramInstruction"},(0,o.kt)("p",null,(0,o.kt)("img",{src:i(61587).Z,width:"2088",height:"432"})),(0,o.kt)("p",null,"This instruction allows an update authority to pass in a metadata account with an optional edition account and then it determines what the correct TokenStandard type is and writes it to the metadata. See ",(0,o.kt)("a",{parentName:"p",href:"./token-standard"},"Token Standard")," for more information.")))}E.isMDXComponent=!0},79827:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Approve-Collection-Authority-6261de93f106b0d6f564626e85231faa.png"},74456:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Approve-Use-Authority-e48277409c420f2d0fc44468de60fd65.png"},37115:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Create-Master-Edition-8a05f07c40b40a99815ad9d3b5c1f1c5.png"},76459:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Create-Metadata-55d54a7109e470e5aa485f1d9d73c415.png"},9846:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Mint-New-Edition-3a3ca50b1a624c24b8cc9b3ba68943df.png"},92041:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Revoke-Collection-Authority-558126ebe54120f86f13dd911a724065.png"},9284:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Revoke-Use-Authority-00323759eb89cc3c140364c3587795c4.png"},47012:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Set-Collection-Size-493a0e9158a39a2d5062ab503b992cc6.png"},61587:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Set-Token-Standard-6c0517e64abbf64bb4b10e7ecec59350.png"},41348:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Unverify-Collection-e5862b11b14f495d2b33bfab5122c138.png"},61089:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Unverify-Creators-f0f4cce88b7e7ff0ea89e98921447351.png"},90465:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Unverify-Sized-Collection-d776954de3bfc5439992661bbdb8c7f1.png"},63224:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Update-Metadata-5b1ea99668c99c347887f63eccf0f684.png"},56855:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Update-Primary-Sale-Flag-139a8bfa0adf61064f269a7f68b7cba8.png"},90130:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Utilize-9728340111ab6095dd5d85bb8e81c538.png"},36238:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Verify-Collection-06953a603c8f49a37a21e0bb62d83187.png"},32868:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Verify-Creators-b5307e43d91cfdd817f60f5401c4149c.png"},45043:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Instruction-Verify-Sized-Collection-03d0328f6382dc306bd32fb1de3208f5.png"}}]);