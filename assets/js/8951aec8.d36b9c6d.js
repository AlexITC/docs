"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4264],{38545:function(e,t,i){i.d(t,{Q:function(){return r},U:function(){return s}});var n=i(67294),a=i(45697),o=i.n(a);function s(e){let{children:t}=e;return n.createElement("div",{className:"accordion"},t)}function r(e){let{open:t,title:i,actions:a,keepAlive:o=!0,children:s}=e;const[r,c]=(0,n.useState)(t),m=r||o;return n.createElement("div",{className:["accordion-item",r?"accordion-item-opened":"accordion-item-closed"].join(" ")},n.createElement("div",{className:"accordion-item-header",onClick:()=>c(!r)},n.createElement("h3",null,n.createElement(d,{opened:r}),n.createElement("span",null,i)),a),n.createElement("div",{className:"accordion-item-content"},m&&s))}function d(e){let{opened:t}=e;return t?n.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"192",height:"192",fill:"currentColor",viewBox:"0 0 256 256"},n.createElement("rect",{width:"256",height:"256",fill:"none"}),n.createElement("path",{d:"M215.4,92.9A8,8,0,0,0,208,88H48a8,8,0,0,0-7.4,4.9,8.4,8.4,0,0,0,1.7,8.8l80,80a8.2,8.2,0,0,0,11.4,0l80-80A8.4,8.4,0,0,0,215.4,92.9Z"})):n.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"192",height:"192",fill:"currentColor",viewBox:"0 0 256 256"},n.createElement("rect",{width:"256",height:"256",fill:"none"}),n.createElement("path",{d:"M181.7,122.3l-80-80a8.4,8.4,0,0,0-8.8-1.7A8,8,0,0,0,88,48V208a8,8,0,0,0,4.9,7.4,8.5,8.5,0,0,0,3.1.6,8.3,8.3,0,0,0,5.7-2.3l80-80A8.1,8.1,0,0,0,181.7,122.3Z"}))}s.propTypes={children:o().any},r.propTypes={open:o().bool,title:o().string,children:o().any,actions:o().any,keepAlive:o().bool},d.propTypes={opened:o().bool}},15019:function(e,t,i){i.d(t,{A:function(){return c}});var n=i(67294),a=i(45697),o=i.n(a),s=i(96486),r=i(39960),d=i(38545);function c(e){let{fields:t,title:i="Fields",firstColumn:a="Field"}=e;return n.createElement(d.Q,{title:i},n.createElement("div",{className:"accordion-table-overflow"},n.createElement("table",{className:"accordion-table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{style:{minWidth:"10rem"}},a),n.createElement("th",null,"Offset"),n.createElement("th",null,"Size"),n.createElement("th",{style:{minWidth:"25rem"}},"Description"))),n.createElement("tbody",null,n.createElement(m,{fields:t})))))}function m(e){let{fields:t,offset:i=0,indent:a=0}=e;return t.map((e=>{const t=i;return"number"==typeof i&&"number"==typeof e.size?i+=e.size:i="~",n.createElement(u,{key:e.name,field:e,offset:t,indent:a})}))}function u(e){var t,i,a;let{field:o,offset:d=0,indent:c=0}=e,u=[];return o.optional&&u.push(n.createElement(r.Z,{href:"/programs/#optional-fields",key:"optional"},"Optional")),o.indicative&&u.push(n.createElement(r.Z,{href:"/programs/#indicative-fields",key:"indicative"},"Indicative")),u=(0,s.flatMap)(u,(e=>[e,", "])).slice(0,-1),n.createElement(n.Fragment,null,n.createElement("tr",{className:c>0?"accordion-table-nested-row":"",key:o.name},n.createElement("th",null,n.createElement("div",{style:{marginLeft:2*c+"rem"}},(0,s.startCase)(o.name))),n.createElement("td",null,null!=(t=o.offset)?t:d),n.createElement("td",null,null!=(i=o.size)?i:"~"),n.createElement("td",null,u.length>0&&n.createElement("span",{style:{fontStyle:"italic"}},"(",u,") "),n.createElement("span",{dangerouslySetInnerHTML:{__html:null!=(a=o.description)?a:""}}))),o.fields&&n.createElement(m,{fields:o.fields,offset:d,indent:c+1}))}c.propTypes={fields:o().array,title:o().string,firstColumn:o().string},m.propTypes={fields:o().array,offset:o().any,indent:o().number},u.propTypes={field:o().object,offset:o().any,indent:o().number}},35213:function(e,t,i){i.d(t,{M1:function(){return a},un:function(){return n}});const n=(e,t)=>{var i,n;const a=e.accounts.find((e=>{let{name:i}=e;return i===t})),s=null!=(i=e.docs.accounts[t])?i:{};if(!a)throw new Error("Account ["+t+"] not found in IDL");return{seeds:null!=(n=s.seeds)?n:[],fields:o(e,a)}},a=(e,t)=>{var i;const n=e.instructions.find((e=>{let{name:i}=e;return i===t})),a=null!=(i=e.docs.instructions[t])?i:{};if(!n)throw new Error("Instruction ["+t+"] not found in IDL");const s=o(e,{kind:"struct",fields:n.args});return{...n,resolvedArgs:s,...a}},o=(e,t)=>{var i,n;const a=s(e,t);if("struct"!==(null==a?void 0:a.kind)&&"struct"!==(null==a||null==(i=a.type)?void 0:i.kind))throw new Error("Can only resolve fields of struct types");const o=e=>"struct"===e.kind?e.fields.map((e=>{const t=r(e),{type:i,docs:n,...a}=o(e),s={...n};delete s.fields,delete s.type;return{optional:t,...Array.isArray(i)?{fields:i}:{type:i},...s,...a}})):e.name&&e.type?{...e,type:o(e.type)}:e.option?o(e.option):e.vec?o(e.vec):e,d=o(a);return Array.isArray(d)?d:null!=(n=d.type)?n:[]},s=(e,t)=>{const i=function(t,n){if(void 0===n&&(n={}),t.name&&t.type){var a,o,s,r;const n=null!=(a=null!=(o=null==(s=e.docs.accounts)?void 0:s[t.name])?o:null==(r=e.docs.types)?void 0:r[t.name])?a:void 0,d=i(t.type,{docs:n}),c={...d.docs,...n};return{...t,docs:c,type:d}}var d;if("struct"===t.kind)return{...t,docs:null==(d=n)?void 0:d.docs,fields:t.fields.flatMap((e=>{var t,a,o,s,r;const d=i(e,n),c=null!=(t=null==(a=n)||null==(o=a.docs)||null==(s=o.fields)?void 0:s[e.name])?t:d.docs;return null!=c&&c.flatten&&"struct"===(null==(r=d.type)?void 0:r.kind)?d.type.fields:[{...d,docs:c}]}))};if(t.defined){var c,m;const n=null!=(c=null==(m=e.docs.types)?void 0:m[t.defined])?c:{},a=e.types.find((e=>{let{name:i}=e;return i===t.defined}));return{...i(a.type,{docs:n}),typeName:t.defined,docs:n}}if(t.option){const e=i(t.option,n);return{...t,docs:e.docs,option:e}}return t.vec?{...t,vec:i(t.vec,n)}:t};return i(t)},r=e=>{const t=e=>e.name&&e.type?t(e.type):!!e.option||!!e.vec&&t(e.vec);return t(e)}},90263:function(e,t,i){i.d(t,{Z:function(){return s}});const n=[{name:"metadata",type:"literal",value:"metadata",description:"The program's prefix for PDA seeds."},{name:"token_metadata_program",type:"program"},{name:"mint",type:"variable",description:"The public key of the Mint Account to derive from."}],a=[...n,{name:"edition",type:"literal",value:"edition",description:"A literal to differentiate the Edition accounts."}],o={updateAuthority:{size:32,description:"The public key that is allowed to update this account."},primarySaleHappened:{size:1,indicative:!0,description:"A boolean indicating if the token has already been sold at least once. Once flipped to <code>True</code>, it cannot ever be <code>False</code> again. This field can affect the way royalties are distributed."},isMutable:{size:1,description:"A boolean indicating if the Metadata Account can be updated. Once flipped to <code>False</code>, it cannot ever be <code>True</code> again."},maxSupply:{size:9,description:"The maximum number of times NFTs can be printed from this Master Edition. When set to <code>None</code>, the program will enable unlimited prints. You can disable NFT printing by setting the <code>Max Supply</code> to <code>0</code>."},edition:{size:8,description:"The edition number of this printed edition. For instance, the 10th printed NFT will have <code>Edition = 10</code>."}};var s={docs:{types:{Data:{description:"A data object containing the following attributes.",fields:{name:{size:36,description:'The on-chain name of the token, limited to 32 bytes. For instance "Degen Ape #1 ".'},symbol:{size:14,description:'The on-chain symbol of the token, limited to 10 bytes. For instance "DAPE".'},uri:{size:204,description:"The URI of the token, limited to 200 bytes. <strong>This URI points to an off-chain JSON file that contains additional data following a certain standard.</strong> You can learn more about this JSON standard here. The JSON file can either be stored in a traditional server (e.g. using AWS) or using a permanent storage solution such as using Arweave."},sellerFeeBasisPoints:{size:2,indicative:!0,description:"The royalties shared by the creators in basis points \u2014 i.e. <code>550</code> means <code>5.5%</code>. Whilst this field is used by virtually all NFT marketplaces, it is not enforced by the Token Metadata program itself."},creators:{description:"An array of creators and their share of the royalties. This array is limited to 5 creators. Note that, because the <code>Creators</code> field is an array of variable length, we cannot guarantee the byte position of any field that follows (Notice the tilde <code>~</code> in the fields below). Each creator contains the following fields."}}},get DataV2(){return this.Data},Creator:{fields:{address:{offset:"~",size:32,description:"The public key of the creator"},verified:{offset:"~",size:1,description:"A boolean indicating if the creator signed the NFT. It is important to check this field to ensure the authenticity of the creator."},share:{offset:"~",size:1,indicative:!0,description:"The creator's shares of the royalties in percentage (1 byte) \u2014 i.e. <code>55</code> means <code>55%</code>. Similarly to the <code>Seller Fee Basis Points</code> field, this is used by marketplaces but not enforced by the Token Metadata program."}}},Collection:{size:34,description:"This field optionally links to the Mint address of another NFT that acts as a Collection NFT. It contains the following sub-fields.",fields:{key:{size:32,description:"The public key of the Collection NFT's Mint Account"},verified:{size:1,description:"A boolean indicating if the owner of the Collection NFT signed this NFT. It is important to check this field to ensure the authenticity of the collection."}}},Uses:{size:18,description:'This field can make NFTs usable. Meaning you can load it with a certain amount of "uses" and use it until it has run out. You can <a href="/programs/token-metadata/using-nfts">learn more about using NFTs here</a>.',fields:{useMethod:{size:1,description:"An enum defining the use behaviour for the NFT. It can be one of the following: <code>Burn</code>, <code>Multiple</code> or <code>Single</code>. "},remaining:{size:8,description:"The remaining amount of uses."},total:{size:8,description:"The total amount of uses allowed in the first place."}}},CollectionDetails:{size:8,description:'This optional enum allows us to differentiate Collection NFTs from Regular NFTs whilst adding additional context such as the amount of NFTs that are linked to the Collection NFT. You can <a href="/programs/token-metadata/certified-collections#differentiating-regular-nfts-from-collection-nfts">learn more about the sized collections here</a>',fields:{size:{size:8,description:"The number of NFTs attached to this Collection NFT."}}},CreateMetadataAccountArgsV3:{description:"An object containing all the arguments for the <code>CreateMetadataAccountV3</code> instruction.",fields:{isMutable:o.isMutable}},UpdateMetadataAccountArgsV2:{description:"An object containing all the arguments for the <code>UpdateMetadataAccountV2</code> instruction.",fields:{updateAuthority:o.updateAuthority,primarySaleHappened:o.primarySaleHappened,isMutable:o.isMutable}},CreateMasterEditionArgs:{description:"An object containing all the arguments for the <code>CreateMasterEditionV3</code> instruction.",fields:{maxSupply:o.maxSupply}},MintNewEditionFromMasterEditionViaTokenArgs:{description:"An object containing all the arguments necessary to print a new edition.",fields:{edition:o.edition}},UtilizeArgs:{description:"An object containing all the arguments necessary to utilize the NFT",fields:{numberOfUses:{size:8,description:"The number of uses to reduce."}}},ApproveUseAuthorityArgs:{description:"An object containing all the arguments necessary to approve a new Use Authority.",fields:{numberOfUses:{size:8,description:"The total number of uses allowed for the new authority."}}}},accounts:{Metadata:{seeds:n,fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to <code>MetadataV1(4)</code>."},updateAuthority:o.updateAuthority,mint:{size:32,description:"The public key of the Mint Account it derives from."},data:{flatten:!0},primarySaleHappened:o.primarySaleHappened,isMutable:o.isMutable,editionNonce:{size:2,description:"A nonce used to verify the edition number of printed NFTs. It will only be set on Edition NFTs and not Master Edition NFTs."},tokenStandard:{size:2,description:'This enum captures the fungibility of the token. You can <a href="/programs/token-metadata/token-standard">learn more about the token standard here</a>.'}}},MasterEditionV2:{seeds:a,fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>MasterEditionV2(6)</code> (or, for previous versions: <code>MasterEditionV1(2)</code>)."},supply:{size:8,description:"The amount of NFTs printed from this Master Edition. This field is automatically computed by the program and cannot be manually updated. Once the <code>Supply</code> reaches the <code>Max Supply</code>, no more prints can be made from this Master Edition."},maxSupply:o.maxSupply}},Edition:{seeds:a,fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>EditionV1(1)</code>."},parent:{size:32,description:"The public key of the Master Edition account that printed this edition."},edition:o.edition}},EditionMarker:{seeds:[...a,{name:"edition_marker",type:"variable",description:"The edition number divided by <code>248</code> rounded down."}],fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>EditionMarker(7)</code>."},ledger:{size:31,description:"An array of 31 bytes keeping track of the editions that have been printed within the marker's range. With 31 bytes, each marker keep track of 248 editions using a bitmask."}}},CollectionAuthorityRecord:{seeds:[...n,{name:"collection_authority_prefix",type:"literal",value:"collection_authority",description:"A literal to differentiate the Collection Authority Record accounts."},{name:"collection_authority",type:"variable",description:"The public key of the authority that is now allowed to verify collections on that NFT."}],fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>CollectionAuthorityRecord(9)</code>."},bump:{size:1,description:"The bump that was used to create the PDA of this account."}}},UseAuthorityRecord:{seeds:[...n,{name:"user_prefix",type:"literal",value:"user",description:"A literal to differentiate the Use Authority Record accounts."},{name:"user",type:"variable",description:"The public key of the authority that is now allowed to use that NFT."}],fields:{key:{size:1,description:"The discriminator of the account as an enum. Equals to: <code>UseAuthorityRecord(8)</code>."},allowedUses:{size:8,description:"The amount of <code>uses</code> this authority is allowed to use."},bump:{size:1,description:"The bump that was used to create the PDA of this account."}}}},instructions:{}},version:"1.4.0",name:"mpl_token_metadata",instructions:[{name:"CreateMetadataAccount",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of token asset"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"update authority info"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"}],args:[{name:"createMetadataAccountArgs",type:{defined:"CreateMetadataAccountArgs"}}],discriminant:{type:"u8",value:0}},{name:"UpdateMetadataAccount",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority key"}],args:[{name:"updateMetadataAccountArgs",type:{defined:"UpdateMetadataAccountArgs"}}],discriminant:{type:"u8",value:1}},{name:"DeprecatedCreateMasterEdition",accounts:[{name:"edition",isMut:!0,isSigner:!1,desc:"Unallocated edition V1 account with address as pda of ['metadata', program id, mint, 'edition']"},{name:"mint",isMut:!0,isSigner:!1,desc:"Metadata mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint - A mint you control that can mint tokens that can be exchanged for limited editions of your master edition via the MintNewEditionFromMasterEditionViaToken endpoint"},{name:"oneTimePrintingAuthorizationMint",isMut:!0,isSigner:!1,desc:"One time authorization printing mint - A mint you control that prints tokens that gives the bearer permission to mint any number of tokens from the printing mint one time via an endpoint with the token-metadata program for your metadata. Also burns the token."},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Current Update authority key"},{name:"printingMintAuthority",isMut:!1,isSigner:!0,desc:"Printing mint authority - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"payer",isMut:!1,isSigner:!0,desc:"payer"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"},{name:"oneTimePrintingAuthorizationMintAuthority",isMut:!1,isSigner:!0,desc:"One time authorization printing mint authority - must be provided if using max supply. THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."}],args:[{name:"createMasterEditionArgs",type:{defined:"CreateMasterEditionArgs"}}],discriminant:{type:"u8",value:2}},{name:"DeprecatedMintNewEditionFromMasterEditionViaPrintingToken",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"New Metadata key (pda of ['metadata', program id, mint id])"},{name:"edition",isMut:!0,isSigner:!1,desc:"New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])"},{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"},{name:"mint",isMut:!0,isSigner:!1,desc:"Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority of new mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing Mint of master record edition"},{name:"masterTokenAccount",isMut:!0,isSigner:!1,desc:"Token account containing Printing mint token to be transferred"},{name:"editionMarker",isMut:!0,isSigner:!1,desc:"Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])"},{name:"burnAuthority",isMut:!1,isSigner:!0,desc:"Burn authority for this token"},{name:"payer",isMut:!1,isSigner:!0,desc:"payer"},{name:"masterUpdateAuthority",isMut:!1,isSigner:!1,desc:"update authority info for new metadata account"},{name:"masterMetadata",isMut:!1,isSigner:!1,desc:"Master record metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"},{name:"reservationList",isMut:!0,isSigner:!1,desc:"Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list.",optional:!0}],args:[],discriminant:{type:"u8",value:3}},{name:"UpdatePrimarySaleHappenedViaToken",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"owner",isMut:!1,isSigner:!0,desc:"Owner on the token account"},{name:"token",isMut:!1,isSigner:!1,desc:"Account containing tokens from the metadata's mint"}],args:[],discriminant:{type:"u8",value:4}},{name:"DeprecatedSetReservationList",accounts:[{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"reservationList",isMut:!0,isSigner:!1,desc:"PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"},{name:"resource",isMut:!1,isSigner:!0,desc:"The resource you tied the reservation list too"}],args:[{name:"setReservationListArgs",type:{defined:"SetReservationListArgs"}}],discriminant:{type:"u8",value:5}},{name:"DeprecatedCreateReservationList",accounts:[{name:"reservationList",isMut:!0,isSigner:!1,desc:"PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"},{name:"payer",isMut:!1,isSigner:!0,desc:"Payer"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"masterEdition",isMut:!1,isSigner:!1,desc:" Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"resource",isMut:!1,isSigner:!1,desc:"A resource you wish to tie the reservation list to. This is so your later visitors who come to redeem can derive your reservation list PDA with something they can easily get at. You choose what this should be."},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"}],args:[],discriminant:{type:"u8",value:6}},{name:"SignMetadata",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"creator",isMut:!1,isSigner:!0,desc:"Creator"}],args:[],discriminant:{type:"u8",value:7}},{name:"DeprecatedMintPrintingTokensViaToken",accounts:[{name:"destination",isMut:!0,isSigner:!1,desc:"Destination account"},{name:"token",isMut:!0,isSigner:!1,desc:"Token account containing one time authorization token"},{name:"oneTimePrintingAuthorizationMint",isMut:!0,isSigner:!1,desc:"One time authorization mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint"},{name:"burnAuthority",isMut:!1,isSigner:!0,desc:"Burn authority"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"masterEdition",isMut:!1,isSigner:!1,desc:"Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent"}],args:[{name:"mintPrintingTokensViaTokenArgs",type:{defined:"MintPrintingTokensViaTokenArgs"}}],discriminant:{type:"u8",value:8}},{name:"DeprecatedMintPrintingTokens",accounts:[{name:"destination",isMut:!0,isSigner:!1,desc:"Destination account"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"masterEdition",isMut:!1,isSigner:!1,desc:"Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent"}],args:[{name:"mintPrintingTokensViaTokenArgs",type:{defined:"MintPrintingTokensViaTokenArgs"}}],discriminant:{type:"u8",value:9}},{name:"CreateMasterEdition",accounts:[{name:"edition",isMut:!0,isSigner:!1,desc:"Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']"},{name:"mint",isMut:!0,isSigner:!1,desc:"Metadata mint"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"}],args:[{name:"createMasterEditionArgs",type:{defined:"CreateMasterEditionArgs"}}],discriminant:{type:"u8",value:10}},{name:"MintNewEditionFromMasterEditionViaToken",accounts:[{name:"newMetadata",isMut:!0,isSigner:!1,desc:"New Metadata key (pda of ['metadata', program id, mint id])"},{name:"newEdition",isMut:!0,isSigner:!1,desc:"New Edition (pda of ['metadata', program id, mint id, 'edition'])"},{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])"},{name:"newMint",isMut:!0,isSigner:!1,desc:"Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"editionMarkPda",isMut:!0,isSigner:!1,desc:"Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."},{name:"newMintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority of new mint"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"tokenAccountOwner",isMut:!1,isSigner:!0,desc:"owner of token account containing master token (#8)"},{name:"tokenAccount",isMut:!1,isSigner:!1,desc:"token account containing token from master metadata mint"},{name:"newMetadataUpdateAuthority",isMut:!1,isSigner:!1,desc:"Update authority info for new metadata"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Master record metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"mintNewEditionFromMasterEditionViaTokenArgs",type:{defined:"MintNewEditionFromMasterEditionViaTokenArgs"}}],discriminant:{type:"u8",value:11}},{name:"ConvertMasterEditionV1ToV2",accounts:[{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"},{name:"oneTimeAuth",isMut:!0,isSigner:!1,desc:"One time authorization mint"},{name:"printingMint",isMut:!0,isSigner:!1,desc:"Printing mint"}],args:[],discriminant:{type:"u8",value:12}},{name:"MintNewEditionFromMasterEditionViaVaultProxy",accounts:[{name:"newMetadata",isMut:!0,isSigner:!1,desc:"New Metadata key (pda of ['metadata', program id, mint id])"},{name:"newEdition",isMut:!0,isSigner:!1,desc:"New Edition (pda of ['metadata', program id, mint id, 'edition'])"},{name:"masterEdition",isMut:!0,isSigner:!1,desc:"Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']"},{name:"newMint",isMut:!0,isSigner:!1,desc:"Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"editionMarkPda",isMut:!0,isSigner:!1,desc:"Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."},{name:"newMintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority of new mint"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"vaultAuthority",isMut:!1,isSigner:!0,desc:"Vault authority"},{name:"safetyDepositStore",isMut:!1,isSigner:!1,desc:"Safety deposit token store account"},{name:"safetyDepositBox",isMut:!1,isSigner:!1,desc:"Safety deposit box"},{name:"vault",isMut:!1,isSigner:!1,desc:"Vault"},{name:"newMetadataUpdateAuthority",isMut:!1,isSigner:!1,desc:"Update authority info for new metadata"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Master record metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"tokenVaultProgram",isMut:!1,isSigner:!1,desc:"Token vault program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"mintNewEditionFromMasterEditionViaTokenArgs",type:{defined:"MintNewEditionFromMasterEditionViaTokenArgs"}}],discriminant:{type:"u8",value:13}},{name:"PuffMetadata",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"}],args:[],discriminant:{type:"u8",value:14}},{name:"UpdateMetadataAccountV2",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority key"}],args:[{name:"updateMetadataAccountArgsV2",type:{defined:"UpdateMetadataAccountArgsV2"}}],discriminant:{type:"u8",value:15}},{name:"CreateMetadataAccountV2",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of token asset"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"update authority info"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"createMetadataAccountArgsV2",type:{defined:"CreateMetadataAccountArgsV2"}}],discriminant:{type:"u8",value:16}},{name:"CreateMasterEditionV3",accounts:[{name:"edition",isMut:!0,isSigner:!1,desc:"Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']"},{name:"mint",isMut:!0,isSigner:!1,desc:"Metadata mint"},{name:"updateAuthority",isMut:!1,isSigner:!0,desc:"Update authority"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"createMasterEditionArgs",type:{defined:"CreateMasterEditionArgs"}}],discriminant:{type:"u8",value:17}},{name:"VerifyCollection",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!1,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"}],args:[],discriminant:{type:"u8",value:18}},{name:"Utilize",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token Account Of NFT"},{name:"mint",isMut:!0,isSigner:!1,desc:"Mint of the Metadata"},{name:"useAuthority",isMut:!0,isSigner:!0,desc:"A Use Authority / Can be the current Owner of the NFT"},{name:"owner",isMut:!1,isSigner:!1,desc:"Owner"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"ataProgram",isMut:!1,isSigner:!1,desc:"Associated Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info"},{name:"useAuthorityRecord",isMut:!0,isSigner:!1,desc:"Use Authority Record PDA If present the program Assumes a delegated use authority",optional:!0},{name:"burner",isMut:!1,isSigner:!1,desc:"Program As Signer (Burner)",optional:!0}],args:[{name:"utilizeArgs",type:{defined:"UtilizeArgs"}}],discriminant:{type:"u8",value:19}},{name:"ApproveUseAuthority",accounts:[{name:"useAuthorityRecord",isMut:!0,isSigner:!1,desc:"Use Authority Record PDA"},{name:"owner",isMut:!0,isSigner:!0,desc:"Owner"},{name:"payer",isMut:!0,isSigner:!0,desc:"Payer"},{name:"user",isMut:!1,isSigner:!1,desc:"A Use Authority"},{name:"ownerTokenAccount",isMut:!0,isSigner:!1,desc:"Owned Token Account Of Mint"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Metadata"},{name:"burner",isMut:!1,isSigner:!1,desc:"Program As Signer (Burner)"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"approveUseAuthorityArgs",type:{defined:"ApproveUseAuthorityArgs"}}],discriminant:{type:"u8",value:20}},{name:"RevokeUseAuthority",accounts:[{name:"useAuthorityRecord",isMut:!0,isSigner:!1,desc:"Use Authority Record PDA"},{name:"owner",isMut:!0,isSigner:!0,desc:"Owner"},{name:"user",isMut:!1,isSigner:!1,desc:"A Use Authority"},{name:"ownerTokenAccount",isMut:!0,isSigner:!1,desc:"Owned Token Account Of Mint"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Metadata"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token program"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[],discriminant:{type:"u8",value:21}},{name:"UnverifyCollection",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Authority"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!1,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:22}},{name:"ApproveCollectionAuthority",accounts:[{name:"collectionAuthorityRecord",isMut:!0,isSigner:!1,desc:"Collection Authority Record PDA"},{name:"newCollectionAuthority",isMut:!1,isSigner:!1,desc:"A Collection Authority"},{name:"updateAuthority",isMut:!0,isSigner:!0,desc:"Update Authority of Collection NFT"},{name:"payer",isMut:!0,isSigner:!0,desc:"Payer"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Collection Metadata account"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Collection Metadata"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[],discriminant:{type:"u8",value:23}},{name:"RevokeCollectionAuthority",accounts:[{name:"collectionAuthorityRecord",isMut:!0,isSigner:!1,desc:"Collection Authority Record PDA"},{name:"delegateAuthority",isMut:!0,isSigner:!1,desc:"Delegated Collection Authority"},{name:"revokeAuthority",isMut:!0,isSigner:!0,desc:"Update Authority, or Delegated Authority, of Collection NFT"},{name:"metadata",isMut:!1,isSigner:!1,desc:"Metadata account"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of Metadata"}],args:[],discriminant:{type:"u8",value:24}},{name:"SetAndVerifyCollection",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"Payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"Update Authority of Collection NFT and NFT"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!1,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:25}},{name:"FreezeDelegatedAccount",accounts:[{name:"delegate",isMut:!0,isSigner:!0,desc:"Delegate"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token account to freeze"},{name:"edition",isMut:!1,isSigner:!1,desc:"Edition"},{name:"mint",isMut:!1,isSigner:!1,desc:"Token mint"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token Program"}],args:[],discriminant:{type:"u8",value:26}},{name:"ThawDelegatedAccount",accounts:[{name:"delegate",isMut:!0,isSigner:!0,desc:"Delegate"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token account to thaw"},{name:"edition",isMut:!1,isSigner:!1,desc:"Edition"},{name:"mint",isMut:!1,isSigner:!1,desc:"Token mint"},{name:"tokenProgram",isMut:!1,isSigner:!1,desc:"Token Program"}],args:[],discriminant:{type:"u8",value:27}},{name:"RemoveCreatorVerification",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"creator",isMut:!1,isSigner:!0,desc:"Creator"}],args:[],discriminant:{type:"u8",value:28}},{name:"BurnNft",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"owner",isMut:!0,isSigner:!0,desc:"NFT owner"},{name:"mint",isMut:!0,isSigner:!1,desc:"Mint of the NFT"},{name:"tokenAccount",isMut:!0,isSigner:!1,desc:"Token account to close"},{name:"masterEditionAccount",isMut:!0,isSigner:!1,desc:"MasterEdition2 of the NFT"},{name:"splTokenProgram",isMut:!1,isSigner:!1,desc:"SPL Token Program"},{name:"collectionMetadata",isMut:!0,isSigner:!1,desc:"Metadata of the Collection",optional:!0}],args:[],discriminant:{type:"u8",value:29}},{name:"VerifySizedCollectionItem",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!1,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!0,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:30}},{name:"UnverifySizedCollectionItem",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!1,isSigner:!0,desc:"Collection Authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!0,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!1,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:31}},{name:"SetAndVerifySizedCollectionItem",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"collectionAuthority",isMut:!1,isSigner:!0,desc:"Collection Update authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"Update Authority of Collection NFT and NFT"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collection",isMut:!0,isSigner:!1,desc:"Metadata Account of the Collection"},{name:"collectionMasterEditionAccount",isMut:!0,isSigner:!1,desc:"MasterEdition2 Account of the Collection Token"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[],discriminant:{type:"u8",value:32}},{name:"CreateMetadataAccountV3",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata key (pda of ['metadata', program id, mint id])"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint of token asset"},{name:"mintAuthority",isMut:!1,isSigner:!0,desc:"Mint authority"},{name:"payer",isMut:!0,isSigner:!0,desc:"payer"},{name:"updateAuthority",isMut:!1,isSigner:!1,desc:"update authority info"},{name:"systemProgram",isMut:!1,isSigner:!1,desc:"System program"},{name:"rent",isMut:!1,isSigner:!1,desc:"Rent info",optional:!0}],args:[{name:"createMetadataAccountArgsV3",type:{defined:"CreateMetadataAccountArgsV3"}}],discriminant:{type:"u8",value:33}},{name:"SetCollectionSize",accounts:[{name:"collectionMetadata",isMut:!0,isSigner:!1,desc:"Collection Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[{name:"setCollectionSizeArgs",type:{defined:"SetCollectionSizeArgs"}}],discriminant:{type:"u8",value:34}},{name:"SetTokenStandard",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata account"},{name:"updateAuthority",isMut:!0,isSigner:!0,desc:"Metadata update authority"},{name:"mint",isMut:!1,isSigner:!1,desc:"Mint account"},{name:"edition",isMut:!1,isSigner:!1,desc:"Edition account",optional:!0}],args:[],discriminant:{type:"u8",value:35}},{name:"BubblegumSetCollectionSize",accounts:[{name:"collectionMetadata",isMut:!0,isSigner:!1,desc:"Collection Metadata account"},{name:"collectionAuthority",isMut:!0,isSigner:!0,desc:"Collection Update authority"},{name:"collectionMint",isMut:!1,isSigner:!1,desc:"Mint of the Collection"},{name:"bubblegumSigner",isMut:!1,isSigner:!0,desc:"Signing PDA of Bubblegum program"},{name:"collectionAuthorityRecord",isMut:!1,isSigner:!1,desc:"Collection Authority Record PDA",optional:!0}],args:[{name:"setCollectionSizeArgs",type:{defined:"SetCollectionSizeArgs"}}],discriminant:{type:"u8",value:36}},{name:"BurnEditionNft",accounts:[{name:"metadata",isMut:!0,isSigner:!1,desc:"Metadata (pda of ['metadata', program id, mint id])"},{name:"owner",isMut:!0,isSigner:!0,desc:"NFT owner"},{name:"printEditionMint",isMut:!0,isSigner:!1,desc:"Mint of the print edition NFT"},{name:"masterEditionMint",isMut:!0,isSigner:!1,desc:"Mint of the original/master NFT"},{name:"printEditionTokenAccount",isMut:!0,isSigner:!1,desc:"Token account the print edition NFT is in"},{name:"masterEditionTokenAccount",isMut:!1,isSigner:!1,desc:"Token account the Master Edition NFT is in"},{name:"masterEditionAccount",isMut:!0,isSigner:!1,desc:"MasterEdition2 of the original NFT"},{name:"printEditionAccount",isMut:!0,isSigner:!1,desc:"Print Edition account of the NFT"},{name:"editionMarkerAccount",isMut:!0,isSigner:!1,desc:"Edition Marker PDA of the NFT"},{name:"splTokenProgram",isMut:!1,isSigner:!1,desc:"SPL Token Program"}],args:[],discriminant:{type:"u8",value:37}}],accounts:[{name:"UseAuthorityRecord",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"allowedUses",type:"u64"},{name:"bump",type:"u8"}]}},{name:"CollectionAuthorityRecord",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"bump",type:"u8"}]}},{name:"Metadata",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"updateAuthority",type:"publicKey"},{name:"mint",type:"publicKey"},{name:"data",type:{defined:"Data"}},{name:"primarySaleHappened",type:"bool"},{name:"isMutable",type:"bool"},{name:"editionNonce",type:{option:"u8"}},{name:"tokenStandard",type:{option:{defined:"TokenStandard"}}},{name:"collection",type:{option:{defined:"Collection"}}},{name:"uses",type:{option:{defined:"Uses"}}},{name:"collectionDetails",type:{option:{defined:"CollectionDetails"}}}]}},{name:"MasterEditionV2",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"supply",type:"u64"},{name:"maxSupply",type:{option:"u64"}}]}},{name:"MasterEditionV1",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"supply",type:"u64"},{name:"maxSupply",type:{option:"u64"}},{name:"printingMint",type:"publicKey"},{name:"oneTimePrintingAuthorizationMint",type:"publicKey"}]}},{name:"Edition",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"parent",type:"publicKey"},{name:"edition",type:"u64"}]}},{name:"ReservationListV2",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"masterEdition",type:"publicKey"},{name:"supplySnapshot",type:{option:"u64"}},{name:"reservations",type:{vec:{defined:"Reservation"}}},{name:"totalReservationSpots",type:"u64"},{name:"currentReservationSpots",type:"u64"}]}},{name:"ReservationListV1",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"masterEdition",type:"publicKey"},{name:"supplySnapshot",type:{option:"u64"}},{name:"reservations",type:{vec:{defined:"ReservationV1"}}}]}},{name:"EditionMarker",type:{kind:"struct",fields:[{name:"key",type:{defined:"Key"}},{name:"ledger",type:{array:["u8",31]}}]}}],types:[{name:"MintPrintingTokensViaTokenArgs",type:{kind:"struct",fields:[{name:"supply",type:"u64"}]}},{name:"SetReservationListArgs",type:{kind:"struct",fields:[{name:"reservations",type:{vec:{defined:"Reservation"}}},{name:"totalReservationSpots",type:{option:"u64"}},{name:"offset",type:"u64"},{name:"totalSpotOffset",type:"u64"}]}},{name:"UpdateMetadataAccountArgs",type:{kind:"struct",fields:[{name:"data",type:{option:{defined:"Data"}}},{name:"updateAuthority",type:{option:"publicKey"}},{name:"primarySaleHappened",type:{option:"bool"}}]}},{name:"UpdateMetadataAccountArgsV2",type:{kind:"struct",fields:[{name:"data",type:{option:{defined:"DataV2"}}},{name:"updateAuthority",type:{option:"publicKey"}},{name:"primarySaleHappened",type:{option:"bool"}},{name:"isMutable",type:{option:"bool"}}]}},{name:"CreateMetadataAccountArgs",type:{kind:"struct",fields:[{name:"data",type:{defined:"Data"}},{name:"isMutable",type:"bool"}]}},{name:"CreateMetadataAccountArgsV2",type:{kind:"struct",fields:[{name:"data",type:{defined:"DataV2"}},{name:"isMutable",type:"bool"}]}},{name:"CreateMetadataAccountArgsV3",type:{kind:"struct",fields:[{name:"data",type:{defined:"DataV2"}},{name:"isMutable",type:"bool"},{name:"collectionDetails",type:{option:{defined:"CollectionDetails"}}}]}},{name:"CreateMasterEditionArgs",type:{kind:"struct",fields:[{name:"maxSupply",type:{option:"u64"}}]}},{name:"MintNewEditionFromMasterEditionViaTokenArgs",type:{kind:"struct",fields:[{name:"edition",type:"u64"}]}},{name:"ApproveUseAuthorityArgs",type:{kind:"struct",fields:[{name:"numberOfUses",type:"u64"}]}},{name:"UtilizeArgs",type:{kind:"struct",fields:[{name:"numberOfUses",type:"u64"}]}},{name:"SetCollectionSizeArgs",type:{kind:"struct",fields:[{name:"size",type:"u64"}]}},{name:"Data",type:{kind:"struct",fields:[{name:"name",type:"string"},{name:"symbol",type:"string"},{name:"uri",type:"string"},{name:"sellerFeeBasisPoints",type:"u16"},{name:"creators",type:{option:{vec:{defined:"Creator"}}}}]}},{name:"DataV2",type:{kind:"struct",fields:[{name:"name",type:"string"},{name:"symbol",type:"string"},{name:"uri",type:"string"},{name:"sellerFeeBasisPoints",type:"u16"},{name:"creators",type:{option:{vec:{defined:"Creator"}}}},{name:"collection",type:{option:{defined:"Collection"}}},{name:"uses",type:{option:{defined:"Uses"}}}]}},{name:"Uses",type:{kind:"struct",fields:[{name:"useMethod",type:{defined:"UseMethod"}},{name:"remaining",type:"u64"},{name:"total",type:"u64"}]}},{name:"Collection",type:{kind:"struct",fields:[{name:"verified",type:"bool"},{name:"key",type:"publicKey"}]}},{name:"Creator",type:{kind:"struct",fields:[{name:"address",type:"publicKey"},{name:"verified",type:"bool"},{name:"share",type:"u8"}]}},{name:"Reservation",type:{kind:"struct",fields:[{name:"address",type:"publicKey"},{name:"spotsRemaining",type:"u64"},{name:"totalSpots",type:"u64"}]}},{name:"ReservationV1",type:{kind:"struct",fields:[{name:"address",type:"publicKey"},{name:"spotsRemaining",type:"u8"},{name:"totalSpots",type:"u8"}]}},{name:"Key",type:{kind:"enum",variants:[{name:"Uninitialized"},{name:"EditionV1"},{name:"MasterEditionV1"},{name:"ReservationListV1"},{name:"MetadataV1"},{name:"ReservationListV2"},{name:"MasterEditionV2"},{name:"EditionMarker"},{name:"UseAuthorityRecord"},{name:"CollectionAuthorityRecord"}]}},{name:"UseMethod",type:{kind:"enum",variants:[{name:"Burn"},{name:"Multiple"},{name:"Single"}]}},{name:"CollectionDetails",type:{kind:"enum",variants:[{name:"V1",fields:[{name:"size",type:"u64"}]}]}},{name:"TokenStandard",type:{kind:"enum",variants:[{name:"NonFungible"},{name:"FungibleAsset"},{name:"Fungible"},{name:"NonFungibleEdition"}]}}],errors:[{code:0,name:"InstructionUnpackError",msg:"Failed to unpack instruction data"},{code:1,name:"InstructionPackError",msg:"Failed to pack instruction data"},{code:2,name:"NotRentExempt",msg:"Lamport balance below rent-exempt threshold"},{code:3,name:"AlreadyInitialized",msg:"Already initialized"},{code:4,name:"Uninitialized",msg:"Uninitialized"},{code:5,name:"InvalidMetadataKey",msg:" Metadata's key must match seed of ['metadata', program id, mint] provided"},{code:6,name:"InvalidEditionKey",msg:"Edition's key must match seed of ['metadata', program id, name, 'edition'] provided"},{code:7,name:"UpdateAuthorityIncorrect",msg:"Update Authority given does not match"},{code:8,name:"UpdateAuthorityIsNotSigner",msg:"Update Authority needs to be signer to update metadata"},{code:9,name:"NotMintAuthority",msg:"You must be the mint authority and signer on this transaction"},{code:10,name:"InvalidMintAuthority",msg:"Mint authority provided does not match the authority on the mint"},{code:11,name:"NameTooLong",msg:"Name too long"},{code:12,name:"SymbolTooLong",msg:"Symbol too long"},{code:13,name:"UriTooLong",msg:"URI too long"},{code:14,name:"UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner",msg:"Update authority must be equivalent to the metadata's authority and also signer of this transaction"},{code:15,name:"MintMismatch",msg:"Mint given does not match mint on Metadata"},{code:16,name:"EditionsMustHaveExactlyOneToken",msg:"Editions must have exactly one token"},{code:17,name:"MaxEditionsMintedAlready",msg:"Maximum editions printed already"},{code:18,name:"TokenMintToFailed",msg:"Token mint to failed"},{code:19,name:"MasterRecordMismatch",msg:"The master edition record passed must match the master record on the edition given"},{code:20,name:"DestinationMintMismatch",msg:"The destination account does not have the right mint"},{code:21,name:"EditionAlreadyMinted",msg:"An edition can only mint one of its kind!"},{code:22,name:"PrintingMintDecimalsShouldBeZero",msg:"Printing mint decimals should be zero"},{code:23,name:"OneTimePrintingAuthorizationMintDecimalsShouldBeZero",msg:"OneTimePrintingAuthorization mint decimals should be zero"},{code:24,name:"EditionMintDecimalsShouldBeZero",msg:"EditionMintDecimalsShouldBeZero"},{code:25,name:"TokenBurnFailed",msg:"Token burn failed"},{code:26,name:"TokenAccountOneTimeAuthMintMismatch",msg:"The One Time authorization mint does not match that on the token account!"},{code:27,name:"DerivedKeyInvalid",msg:"Derived key invalid"},{code:28,name:"PrintingMintMismatch",msg:"The Printing mint does not match that on the master edition!"},{code:29,name:"OneTimePrintingAuthMintMismatch",msg:"The One Time Printing Auth mint does not match that on the master edition!"},{code:30,name:"TokenAccountMintMismatch",msg:"The mint of the token account does not match the Printing mint!"},{code:31,name:"TokenAccountMintMismatchV2",msg:"The mint of the token account does not match the master metadata mint!"},{code:32,name:"NotEnoughTokens",msg:"Not enough tokens to mint a limited edition"},{code:33,name:"PrintingMintAuthorizationAccountMismatch",msg:"The mint on your authorization token holding account does not match your Printing mint!"},{code:34,name:"AuthorizationTokenAccountOwnerMismatch",msg:"The authorization token account has a different owner than the update authority for the master edition!"},{code:35,name:"Disabled",msg:"This feature is currently disabled."},{code:36,name:"CreatorsTooLong",msg:"Creators list too long"},{code:37,name:"CreatorsMustBeAtleastOne",msg:"Creators must be at least one if set"},{code:38,name:"MustBeOneOfCreators",msg:"If using a creators array, you must be one of the creators listed"},{code:39,name:"NoCreatorsPresentOnMetadata",msg:"This metadata does not have creators"},{code:40,name:"CreatorNotFound",msg:"This creator address was not found"},{code:41,name:"InvalidBasisPoints",msg:"Basis points cannot be more than 10000"},{code:42,name:"PrimarySaleCanOnlyBeFlippedToTrue",msg:"Primary sale can only be flipped to true and is immutable"},{code:43,name:"OwnerMismatch",msg:"Owner does not match that on the account given"},{code:44,name:"NoBalanceInAccountForAuthorization",msg:"This account has no tokens to be used for authorization"},{code:45,name:"ShareTotalMustBe100",msg:"Share total must equal 100 for creator array"},{code:46,name:"ReservationExists",msg:"This reservation list already exists!"},{code:47,name:"ReservationDoesNotExist",msg:"This reservation list does not exist!"},{code:48,name:"ReservationNotSet",msg:"This reservation list exists but was never set with reservations"},{code:49,name:"ReservationAlreadyMade",msg:"This reservation list has already been set!"},{code:50,name:"BeyondMaxAddressSize",msg:"Provided more addresses than max allowed in single reservation"},{code:51,name:"NumericalOverflowError",msg:"NumericalOverflowError"},{code:52,name:"ReservationBreachesMaximumSupply",msg:"This reservation would go beyond the maximum supply of the master edition!"},{code:53,name:"AddressNotInReservation",msg:"Address not in reservation!"},{code:54,name:"CannotVerifyAnotherCreator",msg:"You cannot unilaterally verify another creator, they must sign"},{code:55,name:"CannotUnverifyAnotherCreator",msg:"You cannot unilaterally unverify another creator"},{code:56,name:"SpotMismatch",msg:"In initial reservation setting, spots remaining should equal total spots"},{code:57,name:"IncorrectOwner",msg:"Incorrect account owner"},{code:58,name:"PrintingWouldBreachMaximumSupply",msg:"printing these tokens would breach the maximum supply limit of the master edition"},{code:59,name:"DataIsImmutable",msg:"Data is immutable"},{code:60,name:"DuplicateCreatorAddress",msg:"No duplicate creator addresses"},{code:61,name:"ReservationSpotsRemainingShouldMatchTotalSpotsAtStart",msg:"Reservation spots remaining should match total spots when first being created"},{code:62,name:"InvalidTokenProgram",msg:"Invalid token program"},{code:63,name:"DataTypeMismatch",msg:"Data type mismatch"},{code:64,name:"BeyondAlottedAddressSize",msg:"Beyond alotted address size in reservation!"},{code:65,name:"ReservationNotComplete",msg:"The reservation has only been partially alotted"},{code:66,name:"TriedToReplaceAnExistingReservation",msg:"You cannot splice over an existing reservation!"},{code:67,name:"InvalidOperation",msg:"Invalid operation"},{code:68,name:"InvalidOwner",msg:"Invalid Owner"},{code:69,name:"PrintingMintSupplyMustBeZeroForConversion",msg:"Printing mint supply must be zero for conversion"},{code:70,name:"OneTimeAuthMintSupplyMustBeZeroForConversion",msg:"One Time Auth mint supply must be zero for conversion"},{code:71,name:"InvalidEditionIndex",msg:"You tried to insert one edition too many into an edition mark pda"},{code:72,name:"ReservationArrayShouldBeSizeOne",msg:"In the legacy system the reservation needs to be of size one for cpu limit reasons"},{code:73,name:"IsMutableCanOnlyBeFlippedToFalse",msg:"Is Mutable can only be flipped to false"},{code:74,name:"CollectionCannotBeVerifiedInThisInstruction",msg:"Cannont Verify Collection in this Instruction"},{code:75,name:"Removed",msg:"This instruction was deprecated in a previous release and is now removed"},{code:76,name:"MustBeBurned",msg:"This token use method is burn and there are no remaining uses, it must be burned"},{code:77,name:"InvalidUseMethod",msg:"This use method is invalid"},{code:78,name:"CannotChangeUseMethodAfterFirstUse",msg:"Cannot Change Use Method after the first use"},{code:79,name:"CannotChangeUsesAfterFirstUse",msg:"Cannot Change Remaining or Available uses after the first use"},{code:80,name:"CollectionNotFound",msg:"Collection Not Found on Metadata"},{code:81,name:"InvalidCollectionUpdateAuthority",msg:"Collection Update Authority is invalid"},{code:82,name:"CollectionMustBeAUniqueMasterEdition",msg:"Collection Must Be a Unique Master Edition v2"},{code:83,name:"UseAuthorityRecordAlreadyExists",msg:"The Use Authority Record Already Exists, to modify it Revoke, then Approve"},{code:84,name:"UseAuthorityRecordAlreadyRevoked",msg:"The Use Authority Record is empty or already revoked"},{code:85,name:"Unusable",msg:"This token has no uses"},{code:86,name:"NotEnoughUses",msg:"There are not enough Uses left on this token."},{code:87,name:"CollectionAuthorityRecordAlreadyExists",msg:"This Collection Authority Record Already Exists."},{code:88,name:"CollectionAuthorityDoesNotExist",msg:"This Collection Authority Record Does Not Exist."},{code:89,name:"InvalidUseAuthorityRecord",msg:"This Use Authority Record is invalid."},{code:90,name:"InvalidCollectionAuthorityRecord",msg:"This Collection Authority Record is invalid."},{code:91,name:"InvalidFreezeAuthority",msg:"Metadata does not match the freeze authority on the mint"},{code:92,name:"InvalidDelegate",msg:"All tokens in this account have not been delegated to this user."},{code:93,name:"CannotAdjustVerifiedCreator",msg:"Creator can not be adjusted once they are verified."},{code:94,name:"CannotRemoveVerifiedCreator",msg:"Verified creators cannot be removed."},{code:95,name:"CannotWipeVerifiedCreators",msg:"Can not wipe verified creators."},{code:96,name:"NotAllowedToChangeSellerFeeBasisPoints",msg:"Not allowed to change seller fee basis points."},{code:97,name:"EditionOverrideCannotBeZero",msg:"Edition override cannot be zero"},{code:98,name:"InvalidUser",msg:"Invalid User"},{code:99,name:"RevokeCollectionAuthoritySignerIncorrect",msg:"Revoke Collection Authority signer is incorrect"},{code:100,name:"TokenCloseFailed",msg:"Token close failed"},{code:101,name:"UnsizedCollection",msg:"Can't use this function on unsized collection"},{code:102,name:"SizedCollection",msg:"Can't use this function on a sized collection"},{code:103,name:"MissingCollectionMetadata",msg:"Can't burn a verified member of a collection w/o providing collection metadata account"},{code:104,name:"NotAMemberOfCollection",msg:"This NFT is not a member of the specified collection."},{code:105,name:"NotVerifiedMemberOfCollection",msg:"This NFT is not a verified member of the specified collection."},{code:106,name:"NotACollectionParent",msg:"This NFT is not a collection parent NFT."},{code:107,name:"CouldNotDetermineTokenStandard",msg:"Could not determine a TokenStandard type."},{code:108,name:"MissingEditionAccount",msg:"This mint account has an edition but none was provided."},{code:109,name:"NotAMasterEdition",msg:"This edition is not a Master Edition"},{code:110,name:"MasterEditionHasPrints",msg:"This Master Edition has existing prints"},{code:111,name:"BorshDeserializationError",msg:"Borsh Deserialization Error"},{code:112,name:"CannotUpdateVerifiedCollection",msg:"Cannot update a verified colleciton in this command"},{code:113,name:"CollectionMasterEditionAccountInvalid",msg:"Edition account doesnt match collection "},{code:114,name:"AlreadyVerified",msg:"Item is already verified."},{code:115,name:"AlreadyUnverified",msg:"Item is already unverified."},{code:116,name:"NotAPrintEdition",msg:"This edition is not a Print Edition"},{code:117,name:"InvalidMasterEdition",msg:"Invalid Master Edition"},{code:118,name:"InvalidPrintEdition",msg:"Invalid Print Edition"},{code:119,name:"InvalidEditionMarker",msg:"Invalid Edition Marker"},{code:120,name:"ReservationListDeprecated",msg:"Reservation List is Deprecated"},{code:121,name:"PrintEditionDoesNotMatchMasterEdition",msg:"Print Edition does not match Master Edition"}],metadata:{origin:"shank",address:"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",binaryVersion:"0.0.8",libVersion:"~0.0.4"}}},43575:function(e,t,i){i.r(t),i.d(t,{assets:function(){return M},contentTitle:function(){return y},default:function(){return S},frontMatter:function(){return g},metadata:function(){return f},toc:function(){return A}});var n=i(83117),a=i(67294),o=i(3905),s=i(45697),r=i.n(s),d=i(96486),c=i(38545),m=i(15019),u=i(35213);function l(e){let{idl:t,account:i,children:n}=e;return i=(0,u.un)(t,i),a.createElement(c.U,null,a.createElement(c.Q,{title:"Description",open:!0},a.createElement("div",{className:"accordion-item-padding"},n)),i.seeds&&a.createElement(p,{seeds:i.seeds}),a.createElement(m.A,{fields:i.fields}))}function p(e){let{seeds:t}=e;const i=e=>{switch(e.type){case"literal":return"Literal: <code>"+e.value+"</code>";case"program":return"Program ID";default:return(0,d.startCase)(e.type)}},n=e=>{var t;return"program"===e.type?null!=(t=e.description)?t:"The public key of the program.":e.description};return a.createElement(c.Q,{title:"Seeds"},a.createElement("div",{className:"accordion-table-overflow"},a.createElement("table",{className:"accordion-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{minWidth:"10rem"}},"Seed"),a.createElement("th",{style:{minWidth:"10rem"}},"Type"),a.createElement("th",{style:{minWidth:"25rem"}},"Description"))),a.createElement("tbody",null,t.map((e=>a.createElement("tr",{key:e.name},a.createElement("th",null,(0,d.startCase)(e.name)),a.createElement("td",null,a.createElement("div",{dangerouslySetInnerHTML:{__html:i(e)}})),a.createElement("td",null,a.createElement("div",{dangerouslySetInnerHTML:{__html:n(e)}})))))))))}l.propTypes={idl:r().object.isRequired,account:r().string.isRequired,children:r().any},p.propTypes={seeds:r().array.isRequired};var h=i(90263);const g={description:"A comprehensive look at the account structs."},y="Accounts",f={unversionedId:"programs/token-metadata/accounts",id:"programs/token-metadata/accounts",title:"Accounts",description:"A comprehensive look at the account structs.",source:"@site/docs/01-programs/01-token-metadata/02-accounts.md",sourceDirName:"01-programs/01-token-metadata",slug:"/programs/token-metadata/accounts",permalink:"/programs/token-metadata/accounts",draft:!1,editUrl:"https://github.com/metaplex/docs/tree/main/docs/01-programs/01-token-metadata/02-accounts.md",tags:[],version:"current",lastUpdatedAt:1672333175,formattedLastUpdatedAt:"Dec 29, 2022",sidebarPosition:2,frontMatter:{description:"A comprehensive look at the account structs."},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/programs/token-metadata/getting-started"},next:{title:"Instructions",permalink:"/programs/token-metadata/instructions"}},M={},A=[{value:"Metadata",id:"metadata",level:2},{value:"Master Edition",id:"master-edition",level:2},{value:"Edition",id:"edition",level:2},{value:"Edition Marker",id:"edition-marker",level:2},{value:"Collection Authority Record",id:"collection-authority-record",level:2},{value:"Use Authority Record",id:"use-authority-record",level:2}],k={toc:A};function S(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"accounts"},"Accounts"),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)(l,{idl:h.Z,account:"Metadata",mdxType:"ProgramAccount"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing a Metadata Account derived from a Mint Account with a list of data fields under the Metadata Account that is listed on the fields table below.",src:i(15061).Z,width:"2100",height:"984"})),(0,o.kt)("p",null,"The Metadata Account is responsible ",(0,o.kt)("strong",{parentName:"p"},"for storing additional data attached to tokens"),". As every account in the Token Metadata program, it derives from the Mint Account of the token using a PDA."),(0,o.kt)("p",null,'It stores a variety of information for different use-cases and, thus, the reader might benefit from reading the "fields" table below to learn more about them. Additionally, dedicated feature pages have been written to provide more documentation on what can be done with these fields. Their description will contain a link to the appropriate page when available.'),(0,o.kt)("p",null,"One particular field to notice is the ",(0,o.kt)("inlineCode",{parentName:"p"},"Uri")," field that points to an off-chain JSON file which, itself, contains more data. ",(0,o.kt)("a",{parentName:"p",href:"./token-standard"},"That data is standardized")," so applications and marketplaces can reliably find information on a given token. If you're wondering why the Metadata account provides two data stores \u2014 one off-chain and one on-chain \u2014 you might want to ",(0,o.kt)("a",{parentName:"p",href:"./faq#why-does-the-metadata-account-have-both-on-chain-and-off-chain-data"},"take a look at the FAQ here"),".")),(0,o.kt)("h2",{id:"master-edition"},"Master Edition"),(0,o.kt)(l,{idl:h.Z,account:"MasterEditionV2",mdxType:"ProgramAccount"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing a Master Edition Account derived from a Mint Account with a list of data fields under the Master Edition Account that is listed on the fields table below.",src:i(17111).Z,width:"2100",height:"432"})),(0,o.kt)("p",null,"The Master Edition account, derived from a Mint Account, is an important component of NFTs because ",(0,o.kt)("strong",{parentName:"p"},"its existence is proof of the Non-Fungibility of the token"),"."),(0,o.kt)("p",null,"When creating a Master Edition account, the Token Metadata program will check for the following conditions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Mint Account has ",(0,o.kt)("strong",{parentName:"li"},"zero decimals"),", i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"Decimals = 0"),"."),(0,o.kt)("li",{parentName:"ul"},"The Mint Account minted ",(0,o.kt)("strong",{parentName:"li"},"exactly one token")," to a wallet, i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"Supply = 1"),".")),(0,o.kt)("p",null,"Additionally, it will transfer the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mint Authority")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Freeze Authority")," to the Master Edition account to prevent anyone from being able to mint additional tokens. You can read more about ",(0,o.kt)("a",{parentName:"p",href:"./faq#why-are-the-mint-and-freeze-authorities-transferred-to-the-edition-pda"},"why these authorities are transferred instead of being voided in the FAQ"),"."),(0,o.kt)("p",null,"Therefore, what we end up with is a Mint Account whose supply will never go above one and whose token cannot be shared or divided. As such, we end up with a Non-Fungible Token (NFT)."),(0,o.kt)("p",null,"On top of being a Non-Fungible proof, ",(0,o.kt)("strong",{parentName:"p"},"the Master Edition allows NFTs to be printed"),' a limited or unlimited amount of times. The Master Edition NFT acts as the "original record" of the digital asset that can be duplicated or "printed" into Edition NFTs. This allows creators to offer more than one copy of their digital assets to their audience.'),(0,o.kt)("p",null,"The optional ",(0,o.kt)("inlineCode",{parentName:"p"},"Max Supply")," field of the Master Edition account tells us how many copies of the NFT can be created. When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", an unlimited amount of copies can be created. When set to zero, the NFT cannot be copied.")),(0,o.kt)("h2",{id:"edition"},"Edition"),(0,o.kt)(l,{idl:h.Z,account:"Edition",mdxType:"ProgramAccount"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing both a Master Edition Account and an Edition Account derived from a Mint Account. There is a big &quot;OR&quot; written between the two to show that only one of the two can exist for a given NFT.",src:i(92466).Z,width:"2100",height:"816"})),(0,o.kt)("p",null,"The Edition account, derived from a Mint Account, ",(0,o.kt)("strong",{parentName:"p"},"represents an NFT that was copied from a Master Edition NFT"),"."),(0,o.kt)("p",null,"It is important to note that the seeds used to generate this PDA account are the same as the Master Edition account. This means an NFT can either be a Master Edition NFT or an Edition NFT but not both."),(0,o.kt)("p",null,"Similarly to the Master Edition account, the Edition account will perform Non-Fungibility checks and gets assigned as the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mint Authority")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Freeze Authority")," of the Mint Account."),(0,o.kt)("p",null,"Additionally, the Edition account keeps track of the Master Edition account it was printed from in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Parent")," field as well as the edition number in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Edition")," field.")),(0,o.kt)("h2",{id:"edition-marker"},"Edition Marker"),(0,o.kt)(l,{idl:h.Z,account:"EditionMarker",mdxType:"ProgramAccount"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing an Edition Marker Account derived from a Mint Account with a list of data fields under the Edition Marker Account that is listed on the fields table below.",src:i(9406).Z,width:"2100",height:"384"})),(0,o.kt)("p",null,"Edition Marker accounts are used internally by the program to ",(0,o.kt)("strong",{parentName:"p"},"keep track of which editions were printed")," for a given Master Edition."),(0,o.kt)("p",null,"Each Edition Marker account is responsible for storing a subset of the printed editions. More precisely, ",(0,o.kt)("strong",{parentName:"p"},"they each store 248 editions using a bitmask")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," means, the edition has not been printed and ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," means it has. That means Master Edition accounts typically end up using more than one Edition Marker account."),(0,o.kt)("p",null,"To understand how this works, let's imagine that we want to print the 500th edition of a Master Edition."),(0,o.kt)("p",null,"To know if this edition has already been printed, we need to check the third Edition Marker account because the first two are keeping track of the first 496 editions (248 + 248 = 496) and should, at this point, be full of ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"s. Then, we can check the fourth bit of the third Edition Marker to see if the 500th edition has already been printed."),(0,o.kt)("p",null,"Therefore, we can find out if the ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),"th edition was printed by checking the ",(0,o.kt)("inlineCode",{parentName:"p"},"n % 248"),"th bit of the ",(0,o.kt)("inlineCode",{parentName:"p"},"\u230an / 248\u230b"),"th Edition Marker."),(0,o.kt)("p",null,"This is why ",(0,o.kt)("inlineCode",{parentName:"p"},"\u230an / 248\u230b")," is used as a seed of the Edition Marker PDA.")),(0,o.kt)("h2",{id:"collection-authority-record"},"Collection Authority Record"),(0,o.kt)(l,{idl:h.Z,account:"CollectionAuthorityRecord",mdxType:"ProgramAccount"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing a Collection Authority Record Account derived from a Mint Account with a list of data fields under the Collection Authority Record Account that is listed on the fields table below.",src:i(63555).Z,width:"2100",height:"384"})),(0,o.kt)("p",null,"Collection Authority Record accounts are used internally by the program to ",(0,o.kt)("strong",{parentName:"p"},"keep track of which authorities are allowed to set and/or verify the collection")," of the token's Metadata account."),(0,o.kt)("p",null,"It uses a PDA derived from both the Mint Account and the public key of the authority. That way, one can check if a public key is allowed to alter the collection of an NFT by checking the existence of a Collection Authority Record account. The Collection Authority Record account stores the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bump")," that was used to generate the PDA to provide more thorough verification."),(0,o.kt)("p",null,"You can ",(0,o.kt)("a",{parentName:"p",href:"./certified-collections"},"read more about NFT Collections here"),".")),(0,o.kt)("h2",{id:"use-authority-record"},"Use Authority Record"),(0,o.kt)(l,{idl:h.Z,account:"UseAuthorityRecord",mdxType:"ProgramAccount"},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing a Use Authority Record Account derived from a Mint Account with a list of data fields under the Use Authority Record Account that is listed on the fields table below.",src:i(74071).Z,width:"2100",height:"432"})),(0,o.kt)("p",null,"Use Authority Record accounts are used internally by the program to ",(0,o.kt)("strong",{parentName:"p"},"keep track of which authorities are allowed to reduce the uses")," of the token's Metadata account."),(0,o.kt)("p",null,"It uses a PDA derived from both the Mint Account and the public key of the authority. That way, one can check if a public key is allowed to reduce the uses of an NFT by checking the existence of a Use Authority Record account. The Use Authority Record account stores the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bump")," that was used to generate the PDA to provide more thorough verification."),(0,o.kt)("p",null,"It also stores the ",(0,o.kt)("inlineCode",{parentName:"p"},"Allowed Uses")," for the given authority to ensure it cannot use more than what it was allowed to use."),(0,o.kt)("p",null,"You can ",(0,o.kt)("a",{parentName:"p",href:"./using-nfts"},"read more about using NFTs here"),".")))}S.isMDXComponent=!0},63555:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Account-Collection-Authority-Record-b8981fe8200b7fc34be80c23fa22677d.png"},9406:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Account-Edition-Marker-795175f17e47205997d5ab6193d298e7.png"},92466:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Account-Edition-2d3d34e264699ee4d0a35505f91e9b4f.png"},17111:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Account-Master-Edition-109c6e3c28df48c49b940018875f4ddf.png"},15061:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Account-Metadata-c03a163f04f3d03977fdf0b6bced7f17.png"},74071:function(e,t,i){t.Z=i.p+"assets/images/Token-Metadata-Account-Use-Authority-Record-0680aa31a68622b3fbb48dee84be38ee.png"}}]);